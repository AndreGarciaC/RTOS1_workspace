
FZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005304  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080054b4  080054b4  000154b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058a4  080058a4  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  080058a4  080058a4  000158a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058ac  080058ac  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058ac  080058ac  000158ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058b0  080058b0  000158b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080058b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          00004044  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000410c  2000410c  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000109d7  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b60  00000000  00000000  00030acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  00033630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bb0  00000000  00000000  00034308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b72  00000000  00000000  00034eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ca8  00000000  00000000  0005ba2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e469f  00000000  00000000  0006c6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150d71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000363c  00000000  00000000  00150dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800549c 	.word	0x0800549c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000cc 	.word	0x200000cc
 80001ec:	0800549c 	.word	0x0800549c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	200000e4 	.word	0x200000e4
 80005d4:	20000138 	.word	0x20000138

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main( void )
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b092      	sub	sp, #72	; 0x48
 80005dc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005de:	f000 fd59 	bl	8001094 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e2:	f000 f90d 	bl	8000800 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e6:	f000 f99f 	bl	8000928 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80005ea:	f000 f973 	bl	80008d4 <MX_USART3_UART_Init>

	/* USER CODE BEGIN 2 */
	/* Print out the name of this example. */
	vPrintString( pcTextForMain );
 80005ee:	4b75      	ldr	r3, [pc, #468]	; (80007c4 <main+0x1ec>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 faec 	bl	8000bd0 <vPrintString>

	/* USER CODE END 2 */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005f8:	4b73      	ldr	r3, [pc, #460]	; (80007c8 <main+0x1f0>)
 80005fa:	463c      	mov	r4, r7
 80005fc:	461d      	mov	r5, r3
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800060a:	463b      	mov	r3, r7
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 f8f1 	bl	80027f6 <osThreadCreate>
 8000614:	4603      	mov	r3, r0
 8000616:	4a6d      	ldr	r2, [pc, #436]	; (80007cc <main+0x1f4>)
 8000618:	6013      	str	r3, [r2, #0]

    /* Before a semaphore is used it must be explicitly created.  In this example
     * a binary semaphore is created. */
    vSemaphoreCreateBinary( xBinarySemaphoreEntry    );
 800061a:	2203      	movs	r2, #3
 800061c:	2100      	movs	r1, #0
 800061e:	2001      	movs	r0, #1
 8000620:	f002 fa66 	bl	8002af0 <xQueueGenericCreate>
 8000624:	4603      	mov	r3, r0
 8000626:	4a6a      	ldr	r2, [pc, #424]	; (80007d0 <main+0x1f8>)
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	4b69      	ldr	r3, [pc, #420]	; (80007d0 <main+0x1f8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d006      	beq.n	8000640 <main+0x68>
 8000632:	4b67      	ldr	r3, [pc, #412]	; (80007d0 <main+0x1f8>)
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	f002 fae4 	bl	8002c08 <xQueueGenericSend>
    vSemaphoreCreateBinary( xBinarySemaphoreExit     );
 8000640:	2203      	movs	r2, #3
 8000642:	2100      	movs	r1, #0
 8000644:	2001      	movs	r0, #1
 8000646:	f002 fa53 	bl	8002af0 <xQueueGenericCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a61      	ldr	r2, [pc, #388]	; (80007d4 <main+0x1fc>)
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b60      	ldr	r3, [pc, #384]	; (80007d4 <main+0x1fc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d006      	beq.n	8000666 <main+0x8e>
 8000658:	4b5e      	ldr	r3, [pc, #376]	; (80007d4 <main+0x1fc>)
 800065a:	6818      	ldr	r0, [r3, #0]
 800065c:	2300      	movs	r3, #0
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	f002 fad1 	bl	8002c08 <xQueueGenericSend>
    vSemaphoreCreateBinary( xBinarySemaphoreContinue );
 8000666:	2203      	movs	r2, #3
 8000668:	2100      	movs	r1, #0
 800066a:	2001      	movs	r0, #1
 800066c:	f002 fa40 	bl	8002af0 <xQueueGenericCreate>
 8000670:	4603      	mov	r3, r0
 8000672:	4a59      	ldr	r2, [pc, #356]	; (80007d8 <main+0x200>)
 8000674:	6013      	str	r3, [r2, #0]
 8000676:	4b58      	ldr	r3, [pc, #352]	; (80007d8 <main+0x200>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <main+0xb4>
 800067e:	4b56      	ldr	r3, [pc, #344]	; (80007d8 <main+0x200>)
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	f002 fabe 	bl	8002c08 <xQueueGenericSend>

    /* Before a semaphore is used it must be explicitly created.  In this example
     * a mutex type semaphore is created. */
    xMutex = xSemaphoreCreateMutex();
 800068c:	2001      	movs	r0, #1
 800068e:	f002 faa2 	bl	8002bd6 <xQueueCreateMutex>
 8000692:	4603      	mov	r3, r0
 8000694:	4a51      	ldr	r2, [pc, #324]	; (80007dc <main+0x204>)
 8000696:	6013      	str	r3, [r2, #0]

    /* Check the semaphore was created successfully. */
	configASSERT( xBinarySemaphoreEntry    !=  NULL );
 8000698:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <main+0x1f8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10a      	bne.n	80006b6 <main+0xde>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a4:	f383 8811 	msr	BASEPRI, r3
 80006a8:	f3bf 8f6f 	isb	sy
 80006ac:	f3bf 8f4f 	dsb	sy
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006b2:	bf00      	nop
 80006b4:	e7fe      	b.n	80006b4 <main+0xdc>
	configASSERT( xBinarySemaphoreExit     !=  NULL );
 80006b6:	4b47      	ldr	r3, [pc, #284]	; (80007d4 <main+0x1fc>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10a      	bne.n	80006d4 <main+0xfc>
	__asm volatile
 80006be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c2:	f383 8811 	msr	BASEPRI, r3
 80006c6:	f3bf 8f6f 	isb	sy
 80006ca:	f3bf 8f4f 	dsb	sy
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
}
 80006d0:	bf00      	nop
 80006d2:	e7fe      	b.n	80006d2 <main+0xfa>
	configASSERT( xBinarySemaphoreContinue !=  NULL );
 80006d4:	4b40      	ldr	r3, [pc, #256]	; (80007d8 <main+0x200>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10a      	bne.n	80006f2 <main+0x11a>
	__asm volatile
 80006dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e0:	f383 8811 	msr	BASEPRI, r3
 80006e4:	f3bf 8f6f 	isb	sy
 80006e8:	f3bf 8f4f 	dsb	sy
 80006ec:	633b      	str	r3, [r7, #48]	; 0x30
}
 80006ee:	bf00      	nop
 80006f0:	e7fe      	b.n	80006f0 <main+0x118>
	configASSERT( xMutex                   !=  NULL );
 80006f2:	4b3a      	ldr	r3, [pc, #232]	; (80007dc <main+0x204>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10a      	bne.n	8000710 <main+0x138>
	__asm volatile
 80006fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fe:	f383 8811 	msr	BASEPRI, r3
 8000702:	f3bf 8f6f 	isb	sy
 8000706:	f3bf 8f4f 	dsb	sy
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
}
 800070c:	bf00      	nop
 800070e:	e7fe      	b.n	800070e <main+0x136>

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

    /* Task A thread at priority 1 */
    res = xTaskCreate( vTaskA,						/* Pointer to the function thats implement the task. */
 8000710:	2300      	movs	r3, #0
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	2301      	movs	r3, #1
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2300      	movs	r3, #0
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	4930      	ldr	r1, [pc, #192]	; (80007e0 <main+0x208>)
 800071e:	4831      	ldr	r0, [pc, #196]	; (80007e4 <main+0x20c>)
 8000720:	f002 fddb 	bl	80032da <xTaskCreate>
 8000724:	63f8      	str	r0, [r7, #60]	; 0x3c
					   configMINIMAL_STACK_SIZE,	/* Stack depth in words. 						*/
					   (void *) NULL,				/* We are not using the task parameter.			*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 			*/
					   (xTaskHandle *) NULL );		/* We are not going to use the task handle. 	*/
    /* Check the task was created successfully. */
    configASSERT( res == pdPASS );
 8000726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000728:	2b01      	cmp	r3, #1
 800072a:	d00a      	beq.n	8000742 <main+0x16a>
	__asm volatile
 800072c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000730:	f383 8811 	msr	BASEPRI, r3
 8000734:	f3bf 8f6f 	isb	sy
 8000738:	f3bf 8f4f 	dsb	sy
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800073e:	bf00      	nop
 8000740:	e7fe      	b.n	8000740 <main+0x168>

    /* Task B thread at priority 1 */
    res = xTaskCreate( vTaskB,						/* Pointer to the function thats implement the task. */
 8000742:	2300      	movs	r3, #0
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	2301      	movs	r3, #1
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2300      	movs	r3, #0
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	4926      	ldr	r1, [pc, #152]	; (80007e8 <main+0x210>)
 8000750:	4826      	ldr	r0, [pc, #152]	; (80007ec <main+0x214>)
 8000752:	f002 fdc2 	bl	80032da <xTaskCreate>
 8000756:	63f8      	str	r0, [r7, #60]	; 0x3c
					   configMINIMAL_STACK_SIZE,	/* Stack depth in words. 						*/
					   (void *) NULL,				/* We are not using the task parameter.			*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 			*/
					   (xTaskHandle *) NULL	);		/* We are not going to use the task handle. 	*/
    /* Check the task was created successfully. */
    configASSERT( res == pdPASS );
 8000758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800075a:	2b01      	cmp	r3, #1
 800075c:	d00a      	beq.n	8000774 <main+0x19c>
	__asm volatile
 800075e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000762:	f383 8811 	msr	BASEPRI, r3
 8000766:	f3bf 8f6f 	isb	sy
 800076a:	f3bf 8f4f 	dsb	sy
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000770:	bf00      	nop
 8000772:	e7fe      	b.n	8000772 <main+0x19a>

	/* Task Test at priority 1, simply excites the other tasks */
    res = xTaskCreate( vTaskTest,					/* Pointer to the function thats implement the task. */
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <main+0x218>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <main+0x21c>)
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	9200      	str	r2, [sp, #0]
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	491d      	ldr	r1, [pc, #116]	; (80007f8 <main+0x220>)
 8000784:	481d      	ldr	r0, [pc, #116]	; (80007fc <main+0x224>)
 8000786:	f002 fda8 	bl	80032da <xTaskCreate>
 800078a:	63f8      	str	r0, [r7, #60]	; 0x3c
					   configMINIMAL_STACK_SIZE,	/* Stack depth in words. 						*/
					   (void *) pcTaskParameters,	/* We are using text string as task parameter.	*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 			*/
					   (xTaskHandle *) &vTaskTestHandle );	/* We are using a variable as task handle.	*/
    /* Check the task was created successfully. */
    configASSERT( res == pdPASS );
 800078c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078e:	2b01      	cmp	r3, #1
 8000790:	d00a      	beq.n	80007a8 <main+0x1d0>
	__asm volatile
 8000792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000796:	f383 8811 	msr	BASEPRI, r3
 800079a:	f3bf 8f6f 	isb	sy
 800079e:	f3bf 8f4f 	dsb	sy
 80007a2:	623b      	str	r3, [r7, #32]
}
 80007a4:	bf00      	nop
 80007a6:	e7fe      	b.n	80007a6 <main+0x1ce>

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80007a8:	f002 f81e 	bl	80027e8 <osKernelStart>
	__asm volatile
 80007ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b0:	f383 8811 	msr	BASEPRI, r3
 80007b4:	f3bf 8f6f 	isb	sy
 80007b8:	f3bf 8f4f 	dsb	sy
 80007bc:	61fb      	str	r3, [r7, #28]
}
 80007be:	bf00      	nop

	/* If all is well we will never reach here as the scheduler will now be
	 * running.  If we do reach here then it is likely that there was insufficient
	 * heap available for the idle task to be created. */
	configASSERT( 0 );
 80007c0:	e7fe      	b.n	80007c0 <main+0x1e8>
 80007c2:	bf00      	nop
 80007c4:	20000000 	.word	0x20000000
 80007c8:	08005518 	.word	0x08005518
 80007cc:	2000037c 	.word	0x2000037c
 80007d0:	20000380 	.word	0x20000380
 80007d4:	20000384 	.word	0x20000384
 80007d8:	20000388 	.word	0x20000388
 80007dc:	2000038c 	.word	0x2000038c
 80007e0:	080054fc 	.word	0x080054fc
 80007e4:	08000d35 	.word	0x08000d35
 80007e8:	08005504 	.word	0x08005504
 80007ec:	08000e3d 	.word	0x08000e3d
 80007f0:	20000004 	.word	0x20000004
 80007f4:	20000390 	.word	0x20000390
 80007f8:	0800550c 	.word	0x0800550c
 80007fc:	08000f31 	.word	0x08000f31

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 f9dc 	bl	8004bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a27      	ldr	r2, [pc, #156]	; (80008cc <SystemClock_Config+0xcc>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <SystemClock_Config+0xd0>)
 800084a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000860:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000874:	23a8      	movs	r3, #168	; 0xa8
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800087c:	2307      	movs	r3, #7
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f000 ff3d 	bl	8001704 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000890:	f000 f900 	bl	8000a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2105      	movs	r1, #5
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 f99e 	bl	8001bf4 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008be:	f000 f8e9 	bl	8000a94 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	; 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART3_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART3_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART3_UART_Init+0x4c>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART3_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART3_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART3_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART3_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART3_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART3_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART3_UART_Init+0x4c>)
 800090c:	f001 fb92 	bl	8002034 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 f8bd 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000338 	.word	0x20000338
 8000924:	40004800 	.word	0x40004800

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	4b4c      	ldr	r3, [pc, #304]	; (8000a74 <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a4b      	ldr	r2, [pc, #300]	; (8000a74 <MX_GPIO_Init+0x14c>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b49      	ldr	r3, [pc, #292]	; (8000a74 <MX_GPIO_Init+0x14c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	4b45      	ldr	r3, [pc, #276]	; (8000a74 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a44      	ldr	r2, [pc, #272]	; (8000a74 <MX_GPIO_Init+0x14c>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b42      	ldr	r3, [pc, #264]	; (8000a74 <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a3d      	ldr	r2, [pc, #244]	; (8000a74 <MX_GPIO_Init+0x14c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a36      	ldr	r2, [pc, #216]	; (8000a74 <MX_GPIO_Init+0x14c>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	4b30      	ldr	r3, [pc, #192]	; (8000a74 <MX_GPIO_Init+0x14c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <MX_GPIO_Init+0x14c>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <MX_GPIO_Init+0x14c>)
 80009d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80009ec:	4822      	ldr	r0, [pc, #136]	; (8000a78 <MX_GPIO_Init+0x150>)
 80009ee:	f000 fe55 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2140      	movs	r1, #64	; 0x40
 80009f6:	4821      	ldr	r0, [pc, #132]	; (8000a7c <MX_GPIO_Init+0x154>)
 80009f8:	f000 fe50 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	481b      	ldr	r0, [pc, #108]	; (8000a80 <MX_GPIO_Init+0x158>)
 8000a14:	f000 fc96 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a18:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_GPIO_Init+0x150>)
 8000a32:	f000 fc87 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a36:	2340      	movs	r3, #64	; 0x40
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <MX_GPIO_Init+0x154>)
 8000a4e:	f000 fc79 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_GPIO_Init+0x154>)
 8000a66:	f000 fc6d 	bl	8001344 <HAL_GPIO_Init>

}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	; 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40021800 	.word	0x40021800
 8000a80:	40020800 	.word	0x40020800

08000a84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f001 fefe 	bl	800288e <osDelay>
 8000a92:	e7fb      	b.n	8000a8c <StartDefaultTask+0x8>

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_MspInit+0x54>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <HAL_MspInit+0x54>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x54>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_MspInit+0x54>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_MspInit+0x54>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_MspInit+0x54>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	f06f 0001 	mvn.w	r0, #1
 8000ae6:	f000 fc04 	bl	80012f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <HAL_UART_MspInit+0x84>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d12c      	bne.n	8000b74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b64:	2307      	movs	r3, #7
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <HAL_UART_MspInit+0x8c>)
 8000b70:	f000 fbe8 	bl	8001344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40004800 	.word	0x40004800
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 fabe 	bl	8001138 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bbc:	f003 f9b0 	bl	8003f20 <xTaskGetSchedulerState>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d001      	beq.n	8000bca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bc6:	f003 fd8f 	bl	80046e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <vPrintString>:
extern UART_HandleTypeDef huart3;

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000bd8:	f003 fcf4 	bl	80045c4 <vPortEnterCritical>

		HAL_UART_Transmit( &huart3, (uint8_t *)pcString, (uint16_t) strlen((char *)pcString), HAL_MAX_DELAY );
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fb07 	bl	80001f0 <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <vPrintString+0x30>)
 8000bee:	f001 fa6e 	bl	80020ce <HAL_UART_Transmit>

	taskEXIT_CRITICAL();
 8000bf2:	f003 fd17 	bl	8004624 <vPortExitCritical>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000338 	.word	0x20000338

08000c04 <vPrintStringAndNumber>:
/*-----------------------------------------------------------*/

void vPrintStringAndNumber( const char *pcString, uint32_t ulValue )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b090      	sub	sp, #64	; 0x40
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	char buffer [50];

    sprintf( buffer, "%s %lu\r\n", pcString, ulValue );
 8000c0e:	f107 000c 	add.w	r0, r7, #12
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	490c      	ldr	r1, [pc, #48]	; (8000c48 <vPrintStringAndNumber+0x44>)
 8000c18:	f003 ffe0 	bl	8004bdc <siprintf>

	taskENTER_CRITICAL();
 8000c1c:	f003 fcd2 	bl	80045c4 <vPortEnterCritical>

		HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), HAL_MAX_DELAY );
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fae3 	bl	80001f0 <strlen>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f107 010c 	add.w	r1, r7, #12
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <vPrintStringAndNumber+0x48>)
 8000c38:	f001 fa49 	bl	80020ce <HAL_UART_Transmit>

	taskEXIT_CRITICAL();
 8000c3c:	f003 fcf2 	bl	8004624 <vPortExitCritical>
}
 8000c40:	bf00      	nop
 8000c42:	3740      	adds	r7, #64	; 0x40
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	08005534 	.word	0x08005534
 8000c4c:	20000338 	.word	0x20000338

08000c50 <vPrintTwoStrings>:
/*-----------------------------------------------------------*/

void vPrintTwoStrings( const char *pcString1, const char *pcString2 )
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b092      	sub	sp, #72	; 0x48
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	char buffer [50];

	vTaskSuspendAll();
 8000c5a:	f002 fd8f 	bl	800377c <vTaskSuspendAll>
	{
		sprintf( buffer, "At time %lu : %s %s\r\n", xTaskGetTickCount(), pcString1, pcString2 );
 8000c5e:	f002 fe37 	bl	80038d0 <xTaskGetTickCount>
 8000c62:	4602      	mov	r2, r0
 8000c64:	f107 000c 	add.w	r0, r7, #12
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	490b      	ldr	r1, [pc, #44]	; (8000c9c <vPrintTwoStrings+0x4c>)
 8000c70:	f003 ffb4 	bl	8004bdc <siprintf>
		HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), HAL_MAX_DELAY );
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fab9 	bl	80001f0 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	f107 010c 	add.w	r1, r7, #12
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <vPrintTwoStrings+0x50>)
 8000c8c:	f001 fa1f 	bl	80020ce <HAL_UART_Transmit>
	}
	xTaskResumeAll();
 8000c90:	f002 fd82 	bl	8003798 <xTaskResumeAll>
}
 8000c94:	bf00      	nop
 8000c96:	3740      	adds	r7, #64	; 0x40
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	08005540 	.word	0x08005540
 8000ca0:	20000338 	.word	0x20000338

08000ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cac:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <_sbrk+0x5c>)
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <_sbrk+0x60>)
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_sbrk+0x64>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <_sbrk+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d207      	bcs.n	8000ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd4:	f003 ff42 	bl	8004b5c <__errno>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	220c      	movs	r2, #12
 8000cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce2:	e009      	b.n	8000cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <_sbrk+0x64>)
 8000cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20030000 	.word	0x20030000
 8000d04:	00000400 	.word	0x00000400
 8000d08:	20000398 	.word	0x20000398
 8000d0c:	20004110 	.word	0x20004110

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <SystemInit+0x20>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <SystemInit+0x20>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <vTaskA>:
// ------ Public functions -----------------------------------------

/*------------------------------------------------------------------*/
/* Task A thread */
void vTaskA( void *pvParameters )
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	/* Print out the name of this task. */
	vPrintString( pcTextForTaskA );
 8000d3c:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <vTaskA+0xd8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff45 	bl	8000bd0 <vPrintString>
	/* As per most tasks, this task is implemented within an infinite loop.
	 *
	 * Take the semaphore once to start with so the semaphore is empty before the
	 * infinite loop is entered.  The semaphore was created before the scheduler
	 * was started so before this task ran for the first time.*/
    xSemaphoreTake( xBinarySemaphoreEntry, (portTickType) 0 );
 8000d46:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <vTaskA+0xdc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 f859 	bl	8002e04 <xQueueSemaphoreTake>
    xSemaphoreTake( xBinarySemaphoreContinue, (portTickType) 0 );
 8000d52:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <vTaskA+0xe0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 f853 	bl	8002e04 <xQueueSemaphoreTake>

    /* Init Task A & B Counter and Reset Task A Flag	*/
    lTasksCnt = 0;
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <vTaskA+0xe4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
    lTaskAFlag = 0;
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <vTaskA+0xe8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]

    while( 1 )
    {
	    /* Toggle LD3 state */
		HAL_GPIO_TogglePin( LD3_GPIO_Port, LD3_Pin );
 8000d6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d6e:	482c      	ldr	r0, [pc, #176]	; (8000e20 <vTaskA+0xec>)
 8000d70:	f000 fcad 	bl	80016ce <HAL_GPIO_TogglePin>

        /* Use the semaphore to wait for the event.  The task blocks
         * indefinitely meaning this function call will only return once the
         * semaphore has been successfully obtained - so there is no need to check
         * the returned value. */
    	vPrintString( pcTextForTaskA_WaitEntry );
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <vTaskA+0xf0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff29 	bl	8000bd0 <vPrintString>
    	xSemaphoreTake( xBinarySemaphoreEntry, portMAX_DELAY );
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <vTaskA+0xdc>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 f83c 	bl	8002e04 <xQueueSemaphoreTake>
    		 * Attempt to take the semaphore, blocking indefinitely if the mutex is not
    		 * available immediately.  The call to xSemaphoreTake() will only return when
    		 * the semaphore has been successfully obtained so there is no need to check
    		 * the return value.  If any other delay period was used then the code must
    		 * check that xSemaphoreTake() returns pdTRUE before accessing the resource. */
        	vPrintString( pcTextForTaskA_WaitMutex );
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <vTaskA+0xf4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff1d 	bl	8000bd0 <vPrintString>
    		xSemaphoreTake( xMutex, portMAX_DELAY );
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <vTaskA+0xf8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 f830 	bl	8002e04 <xQueueSemaphoreTake>
        	{
        		/* The following line will only execute once the semaphore has been
        		 * successfully obtained. */

        		/* Update Task A & B Counter */
    			lTasksCnt++;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <vTaskA+0xe4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <vTaskA+0xe4>)
 8000dac:	6013      	str	r3, [r2, #0]
    			vPrintStringAndNumber( pcTextForTaskA_lTasksCnt, lTasksCnt);
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <vTaskA+0xfc>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <vTaskA+0xe4>)
 8000db4:	6812      	ldr	r2, [r2, #0]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff23 	bl	8000c04 <vPrintStringAndNumber>

   			    /* Check Task A & B Counter	*/
    			if( lTasksCnt == lTasksCntMAX )
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <vTaskA+0xe4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b05      	cmp	r3, #5
 8000dc4:	d102      	bne.n	8000dcc <vTaskA+0x98>
    			{
       			    /* Set Task A Flag	*/
    				lTaskAFlag = 1;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <vTaskA+0xe8>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
    			}
       			/* 'Give' the semaphore to unblock the tasks. */
       			vPrintString( pcTextForTaskA_SignalMutex );
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <vTaskA+0x100>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fefd 	bl	8000bd0 <vPrintString>
       			xSemaphoreGive( xMutex );
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <vTaskA+0xf8>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	f001 ff12 	bl	8002c08 <xQueueGenericSend>

   			    /* Check Task A Flag	*/
       			if( lTaskAFlag == 1 )
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <vTaskA+0xe8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d1be      	bne.n	8000d6a <vTaskA+0x36>
       			{
       			    /* Reset Task A Flag	*/
       			    lTaskAFlag = 0;
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <vTaskA+0xe8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]

       		        /* Use the semaphore to wait for the event.  The task blocks
       		         * indefinitely meaning this function call will only return once the
       		         * semaphore has been successfully obtained - so there is no need to check
       		         * the returned value. */
       			    vPrintString( pcTextForTaskA_WaitContinue );
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <vTaskA+0x104>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff feea 	bl	8000bd0 <vPrintString>
       	        	xSemaphoreTake( xBinarySemaphoreContinue, portMAX_DELAY );
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <vTaskA+0xe0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fffd 	bl	8002e04 <xQueueSemaphoreTake>
		HAL_GPIO_TogglePin( LD3_GPIO_Port, LD3_Pin );
 8000e0a:	e7ae      	b.n	8000d6a <vTaskA+0x36>
 8000e0c:	2000000c 	.word	0x2000000c
 8000e10:	20000380 	.word	0x20000380
 8000e14:	20000388 	.word	0x20000388
 8000e18:	20000394 	.word	0x20000394
 8000e1c:	2000039c 	.word	0x2000039c
 8000e20:	40020400 	.word	0x40020400
 8000e24:	20000014 	.word	0x20000014
 8000e28:	2000001c 	.word	0x2000001c
 8000e2c:	2000038c 	.word	0x2000038c
 8000e30:	20000010 	.word	0x20000010
 8000e34:	20000020 	.word	0x20000020
 8000e38:	20000018 	.word	0x20000018

08000e3c <vTaskB>:
// ------ Public functions -----------------------------------------

/*------------------------------------------------------------------*/
/* Task B thread */
void vTaskB( void *pvParameters )
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	/* Print out the name of this task. */
	vPrintString( pcTextForTaskB );
 8000e44:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <vTaskB+0xc4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fec1 	bl	8000bd0 <vPrintString>
	/* As per most tasks, this task is implemented within an infinite loop.
	 *
	 * Take the semaphore once to start with so the semaphore is empty before the
	 * infinite loop is entered.  The semaphore was created before the scheduler
	 * was started so before this task ran for the first time.*/
    xSemaphoreTake( xBinarySemaphoreExit, (portTickType) 0 );
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <vTaskB+0xc8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 ffd5 	bl	8002e04 <xQueueSemaphoreTake>


    /* Reset Task B Flag	*/
    lTaskBFlag = 0;
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <vTaskB+0xcc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]


    while( 1 )
    {
	    /* Toggle LD2 state */
		HAL_GPIO_TogglePin( LD2_GPIO_Port, LD2_Pin );
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	482a      	ldr	r0, [pc, #168]	; (8000f0c <vTaskB+0xd0>)
 8000e64:	f000 fc33 	bl	80016ce <HAL_GPIO_TogglePin>

		/* Use the semaphore to wait for the event.  The task blocks
         * indefinitely meaning this function call will only return once the
         * semaphore has been successfully obtained - so there is no need to check
         * the returned value. */
		vPrintString( pcTextForTaskB_WaitExit );
 8000e68:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <vTaskB+0xd4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff feaf 	bl	8000bd0 <vPrintString>
        xSemaphoreTake( xBinarySemaphoreExit, portMAX_DELAY );
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <vTaskB+0xc8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 ffc2 	bl	8002e04 <xQueueSemaphoreTake>
    		 * Attempt to take the semaphore, blocking indefinitely if the mutex is not
    		 * available immediately.  The call to xSemaphoreTake() will only return when
    		 * the semaphore has been successfully obtained so there is no need to check
    		 * the return value.  If any other delay period was used then the code must
    		 * check that xSemaphoreTake() returns pdTRUE before accessing the resource. */
        	vPrintString( pcTextForTaskB_WaitMutex );
 8000e80:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <vTaskB+0xd8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fea3 	bl	8000bd0 <vPrintString>
        	xSemaphoreTake( xMutex, portMAX_DELAY );
 8000e8a:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <vTaskB+0xdc>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 ffb6 	bl	8002e04 <xQueueSemaphoreTake>
        	{
        		/* The following line will only execute once the semaphore has been
        		 * successfully obtained. */

        		/* Update Task A & B Counter */
        		lTasksCnt--;
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <vTaskB+0xe0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <vTaskB+0xe0>)
 8000ea0:	6013      	str	r3, [r2, #0]
    			vPrintStringAndNumber( pcTextForTaskB_lTasksCnt, lTasksCnt);
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <vTaskB+0xe4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <vTaskB+0xe0>)
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fea9 	bl	8000c04 <vPrintStringAndNumber>

   			    /* Check Task A & B Counter	*/
    			if( lTasksCnt == (lTasksCntMAX - 1) )
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <vTaskB+0xe0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d102      	bne.n	8000ec0 <vTaskB+0x84>
    			{
       			    /* Set Task B Flag	*/
    				lTaskBFlag = 1;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <vTaskB+0xcc>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
    			}
    			/* 'Give' the semaphore to unblock the tasks. */
        		vPrintString( pcTextForTaskB_SignalMutex );
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <vTaskB+0xe8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe83 	bl	8000bd0 <vPrintString>
        		xSemaphoreGive( xMutex );
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <vTaskB+0xdc>)
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f001 fe98 	bl	8002c08 <xQueueGenericSend>

   			    /* Check Task B Flag	*/
       			if( lTaskBFlag == 1 )
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <vTaskB+0xcc>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d1bf      	bne.n	8000e60 <vTaskB+0x24>
       			{
       			    /* Reset Task B Flag	*/
       			    lTaskBFlag = 0;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <vTaskB+0xcc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]

        			/* 'Give' the semaphore to unblock the task A. */
       	        	vPrintString( pcTextForTaskB_SignalContinue );
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <vTaskB+0xec>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fe70 	bl	8000bd0 <vPrintString>
       	        	xSemaphoreGive( xBinarySemaphoreContinue );
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <vTaskB+0xf0>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f001 fe85 	bl	8002c08 <xQueueGenericSend>
		HAL_GPIO_TogglePin( LD2_GPIO_Port, LD2_Pin );
 8000efe:	e7af      	b.n	8000e60 <vTaskB+0x24>
 8000f00:	20000024 	.word	0x20000024
 8000f04:	20000384 	.word	0x20000384
 8000f08:	200003a0 	.word	0x200003a0
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	2000002c 	.word	0x2000002c
 8000f14:	20000034 	.word	0x20000034
 8000f18:	2000038c 	.word	0x2000038c
 8000f1c:	20000394 	.word	0x20000394
 8000f20:	20000028 	.word	0x20000028
 8000f24:	20000038 	.word	0x20000038
 8000f28:	20000030 	.word	0x20000030
 8000f2c:	20000388 	.word	0x20000388

08000f30 <vTaskTest>:
// ------ Public functions -----------------------------------------

/*------------------------------------------------------------------*/
/* Task Test thread */
void vTaskTest( void *pvParameters )
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	uint32_t i = TEST_X;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	617b      	str	r3, [r7, #20]
	portTickType xLastWakeTime;
	char *pcTaskParameters;

	/* The string to print out is passed in via the parameter.  Cast this to a
	 * character pointer. */
	pcTaskParameters = (char *) pvParameters;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	613b      	str	r3, [r7, #16]

	/* Print out the name, parameters and TEST_X of this task. */
	vPrintString( pcTextForTaskTest );
 8000f40:	4b32      	ldr	r3, [pc, #200]	; (800100c <vTaskTest+0xdc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fe43 	bl	8000bd0 <vPrintString>
	vPrintString( pcTaskParameters );
 8000f4a:	6938      	ldr	r0, [r7, #16]
 8000f4c:	f7ff fe40 	bl	8000bd0 <vPrintString>
	vPrintStringAndNumber( pcTextForTaskTest_TEST_X, i);
 8000f50:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <vTaskTest+0xe0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6979      	ldr	r1, [r7, #20]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fe54 	bl	8000c04 <vPrintStringAndNumber>

	/* The xLastWakeTime variable needs to be initialized with the current tick
	 * count.  Note that this is the only time we access this variable. From this
	 * point on xLastWakeTime is managed automatically by the vTaskDelayUntil()
	 * API function. */
	xLastWakeTime = xTaskGetTickCount();
 8000f5c:	f002 fcb8 	bl	80038d0 <xTaskGetTickCount>
 8000f60:	4603      	mov	r3, r0
 8000f62:	60fb      	str	r3, [r7, #12]

	while( 1 )
	{
		/* Scanning the array of events to excite tasks */
		for ( i = 0; i < (sizeof(eTaskTestArray)/sizeof(eTaskTest_t)); i++ )
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e04b      	b.n	8001002 <vTaskTest+0xd2>
		{
		    /* Toggle LD1 state */
			HAL_GPIO_TogglePin( LD1_GPIO_Port, LD1_Pin );
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4829      	ldr	r0, [pc, #164]	; (8001014 <vTaskTest+0xe4>)
 8000f6e:	f000 fbae 	bl	80016ce <HAL_GPIO_TogglePin>

			vPrintTwoStrings( pcTaskGetName( vTaskTestHandle ), "- Running" );
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <vTaskTest+0xe8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 fcba 	bl	80038f0 <pcTaskGetName>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4927      	ldr	r1, [pc, #156]	; (800101c <vTaskTest+0xec>)
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fe65 	bl	8000c50 <vPrintTwoStrings>
			vPrintStringAndNumber( pcTextForTaskTest_eTaskTestArrayIndex, i);
 8000f86:	4b26      	ldr	r3, [pc, #152]	; (8001020 <vTaskTest+0xf0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6979      	ldr	r1, [r7, #20]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe39 	bl	8000c04 <vPrintStringAndNumber>

			switch( eTaskTestArray[i] ) {
 8000f92:	4a24      	ldr	r2, [pc, #144]	; (8001024 <vTaskTest+0xf4>)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d002      	beq.n	8000fa4 <vTaskTest+0x74>
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d00d      	beq.n	8000fbe <vTaskTest+0x8e>
 8000fa2:	e019      	b.n	8000fd8 <vTaskTest+0xa8>

		    	case Entry:

				    /* 'Give' the semaphore to unblock the task A. */
		    		vPrintString( pcTextForTaskTest_SignalEntry );
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <vTaskTest+0xf8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fe11 	bl	8000bd0 <vPrintString>
					xSemaphoreGive( xBinarySemaphoreEntry );
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <vTaskTest+0xfc>)
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	f001 fe26 	bl	8002c08 <xQueueGenericSend>
					break;
 8000fbc:	e012      	b.n	8000fe4 <vTaskTest+0xb4>

		    	case Exit:

				    /* 'Give' the semaphore to unblock the task B. */
		    		vPrintString( pcTextForTaskTest_SignalExit );
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <vTaskTest+0x100>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fe04 	bl	8000bd0 <vPrintString>
		    		xSemaphoreGive( xBinarySemaphoreExit );
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <vTaskTest+0x104>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f001 fe19 	bl	8002c08 <xQueueGenericSend>
					break;
 8000fd6:	e005      	b.n	8000fe4 <vTaskTest+0xb4>

		    	case Error:
		    	default:

		    		vPrintString( pcTextForTaskTest_SignalError );
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <vTaskTest+0x108>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fdf7 	bl	8000bd0 <vPrintString>
		    		break;
 8000fe2:	bf00      	nop
			/* We want this task to execute exactly every 5000 milliseconds.  As per
			 * the vTaskDelay() function, time is measured in ticks, and the
			 * portTICK_RATE_MS constant is used to convert this to milliseconds.
			 * xLastWakeTime is automatically updated within vTaskDelayUntil() so does not
			 * have to be updated by this task code. */
		    vPrintString( pcTextForTaskTest_Wait5000mS );
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <vTaskTest+0x10c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fdf1 	bl	8000bd0 <vPrintString>
    		vTaskDelayUntil( &xLastWakeTime, (5000 / portTICK_RATE_MS) );
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 faae 	bl	8003558 <vTaskDelayUntil>
		for ( i = 0; i < (sizeof(eTaskTestArray)/sizeof(eTaskTest_t)); i++ )
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b0b      	cmp	r3, #11
 8001006:	d9b0      	bls.n	8000f6a <vTaskTest+0x3a>
 8001008:	e7ac      	b.n	8000f64 <vTaskTest+0x34>
 800100a:	bf00      	nop
 800100c:	2000003c 	.word	0x2000003c
 8001010:	20000040 	.word	0x20000040
 8001014:	40020400 	.word	0x40020400
 8001018:	20000390 	.word	0x20000390
 800101c:	08005838 	.word	0x08005838
 8001020:	20000044 	.word	0x20000044
 8001024:	08005864 	.word	0x08005864
 8001028:	20000048 	.word	0x20000048
 800102c:	20000380 	.word	0x20000380
 8001030:	2000004c 	.word	0x2000004c
 8001034:	20000384 	.word	0x20000384
 8001038:	20000050 	.word	0x20000050
 800103c:	20000054 	.word	0x20000054

08001040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800105c:	4c0b      	ldr	r4, [pc, #44]	; (800108c <LoopFillZerobss+0x26>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800106a:	f7ff fe51 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f003 fd7b 	bl	8004b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fab1 	bl	80005d8 <main>
  bx  lr    
 8001076:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001078:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001084:	080058b4 	.word	0x080058b4
  ldr r2, =_sbss
 8001088:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 800108c:	2000410c 	.word	0x2000410c

08001090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC_IRQHandler>
	...

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_Init+0x40>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_Init+0x40>)
 80010aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_Init+0x40>)
 80010b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f90d 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	200f      	movs	r0, #15
 80010c4:	f000 f808 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fcea 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023c00 	.word	0x40023c00

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x54>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f917 	bl	800132a <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001114:	f000 f8ed 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x5c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000008 	.word	0x20000008
 8001130:	2000005c 	.word	0x2000005c
 8001134:	20000058 	.word	0x20000058

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000005c 	.word	0x2000005c
 800115c:	200003a4 	.word	0x200003a4

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200003a4 	.word	0x200003a4

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff47 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff5c 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffb0 	bl	8001298 <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e177      	b.n	8001650 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 8166 	bne.w	800164a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d005      	beq.n	8001396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	2b02      	cmp	r3, #2
 8001394:	d130      	bne.n	80013f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 0201 	and.w	r2, r3, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b03      	cmp	r3, #3
 8001402:	d017      	beq.n	8001434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d123      	bne.n	8001488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80c0 	beq.w	800164a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b66      	ldr	r3, [pc, #408]	; (8001668 <HAL_GPIO_Init+0x324>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_GPIO_Init+0x324>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b63      	ldr	r3, [pc, #396]	; (8001668 <HAL_GPIO_Init+0x324>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e6:	4a61      	ldr	r2, [pc, #388]	; (800166c <HAL_GPIO_Init+0x328>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_GPIO_Init+0x32c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d037      	beq.n	8001582 <HAL_GPIO_Init+0x23e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a57      	ldr	r2, [pc, #348]	; (8001674 <HAL_GPIO_Init+0x330>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d031      	beq.n	800157e <HAL_GPIO_Init+0x23a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a56      	ldr	r2, [pc, #344]	; (8001678 <HAL_GPIO_Init+0x334>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d02b      	beq.n	800157a <HAL_GPIO_Init+0x236>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a55      	ldr	r2, [pc, #340]	; (800167c <HAL_GPIO_Init+0x338>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d025      	beq.n	8001576 <HAL_GPIO_Init+0x232>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a54      	ldr	r2, [pc, #336]	; (8001680 <HAL_GPIO_Init+0x33c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d01f      	beq.n	8001572 <HAL_GPIO_Init+0x22e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a53      	ldr	r2, [pc, #332]	; (8001684 <HAL_GPIO_Init+0x340>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d019      	beq.n	800156e <HAL_GPIO_Init+0x22a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a52      	ldr	r2, [pc, #328]	; (8001688 <HAL_GPIO_Init+0x344>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_GPIO_Init+0x226>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a51      	ldr	r2, [pc, #324]	; (800168c <HAL_GPIO_Init+0x348>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d00d      	beq.n	8001566 <HAL_GPIO_Init+0x222>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a50      	ldr	r2, [pc, #320]	; (8001690 <HAL_GPIO_Init+0x34c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d007      	beq.n	8001562 <HAL_GPIO_Init+0x21e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4f      	ldr	r2, [pc, #316]	; (8001694 <HAL_GPIO_Init+0x350>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_GPIO_Init+0x21a>
 800155a:	2309      	movs	r3, #9
 800155c:	e012      	b.n	8001584 <HAL_GPIO_Init+0x240>
 800155e:	230a      	movs	r3, #10
 8001560:	e010      	b.n	8001584 <HAL_GPIO_Init+0x240>
 8001562:	2308      	movs	r3, #8
 8001564:	e00e      	b.n	8001584 <HAL_GPIO_Init+0x240>
 8001566:	2307      	movs	r3, #7
 8001568:	e00c      	b.n	8001584 <HAL_GPIO_Init+0x240>
 800156a:	2306      	movs	r3, #6
 800156c:	e00a      	b.n	8001584 <HAL_GPIO_Init+0x240>
 800156e:	2305      	movs	r3, #5
 8001570:	e008      	b.n	8001584 <HAL_GPIO_Init+0x240>
 8001572:	2304      	movs	r3, #4
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x240>
 8001576:	2303      	movs	r3, #3
 8001578:	e004      	b.n	8001584 <HAL_GPIO_Init+0x240>
 800157a:	2302      	movs	r3, #2
 800157c:	e002      	b.n	8001584 <HAL_GPIO_Init+0x240>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_GPIO_Init+0x240>
 8001582:	2300      	movs	r3, #0
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	f002 0203 	and.w	r2, r2, #3
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	4093      	lsls	r3, r2
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001594:	4935      	ldr	r1, [pc, #212]	; (800166c <HAL_GPIO_Init+0x328>)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_GPIO_Init+0x354>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c6:	4a34      	ldr	r2, [pc, #208]	; (8001698 <HAL_GPIO_Init+0x354>)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_GPIO_Init+0x354>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f0:	4a29      	ldr	r2, [pc, #164]	; (8001698 <HAL_GPIO_Init+0x354>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_GPIO_Init+0x354>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800161a:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <HAL_GPIO_Init+0x354>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_GPIO_Init+0x354>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_GPIO_Init+0x354>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3301      	adds	r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	2b0f      	cmp	r3, #15
 8001654:	f67f ae84 	bls.w	8001360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40013800 	.word	0x40013800
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400
 8001678:	40020800 	.word	0x40020800
 800167c:	40020c00 	.word	0x40020c00
 8001680:	40021000 	.word	0x40021000
 8001684:	40021400 	.word	0x40021400
 8001688:	40021800 	.word	0x40021800
 800168c:	40021c00 	.word	0x40021c00
 8001690:	40022000 	.word	0x40022000
 8001694:	40022400 	.word	0x40022400
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e0:	887a      	ldrh	r2, [r7, #2]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	041a      	lsls	r2, r3, #16
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	400b      	ands	r3, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e267      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d075      	beq.n	800180e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001722:	4b88      	ldr	r3, [pc, #544]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d00c      	beq.n	8001748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172e:	4b85      	ldr	r3, [pc, #532]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001736:	2b08      	cmp	r3, #8
 8001738:	d112      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173a:	4b82      	ldr	r3, [pc, #520]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001746:	d10b      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	4b7e      	ldr	r3, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d05b      	beq.n	800180c <HAL_RCC_OscConfig+0x108>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d157      	bne.n	800180c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e242      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x74>
 800176a:	4b76      	ldr	r3, [pc, #472]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a75      	ldr	r2, [pc, #468]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x98>
 8001782:	4b70      	ldr	r3, [pc, #448]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6f      	ldr	r2, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6c      	ldr	r2, [pc, #432]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xb0>
 800179c:	4b69      	ldr	r3, [pc, #420]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a68      	ldr	r2, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b66      	ldr	r3, [pc, #408]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a65      	ldr	r2, [pc, #404]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fcd0 	bl	8001160 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fccc 	bl	8001160 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e207      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xc0>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fcbc 	bl	8001160 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fcb8 	bl	8001160 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e1f3      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b51      	ldr	r3, [pc, #324]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0xe8>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181a:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b44      	ldr	r3, [pc, #272]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1c7      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4937      	ldr	r1, [pc, #220]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e03a      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b34      	ldr	r3, [pc, #208]	; (8001948 <HAL_RCC_OscConfig+0x244>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fc71 	bl	8001160 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fc6d 	bl	8001160 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1a8      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4925      	ldr	r1, [pc, #148]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_RCC_OscConfig+0x244>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fc50 	bl	8001160 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fc4c 	bl	8001160 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e187      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d036      	beq.n	800195c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d016      	beq.n	8001924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_RCC_OscConfig+0x248>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff fc30 	bl	8001160 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fc2c 	bl	8001160 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e167      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_OscConfig+0x240>)
 8001918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x200>
 8001922:	e01b      	b.n	800195c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_RCC_OscConfig+0x248>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fc19 	bl	8001160 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	e00e      	b.n	8001950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff fc15 	bl	8001160 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d907      	bls.n	8001950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e150      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001944:	40023800 	.word	0x40023800
 8001948:	42470000 	.word	0x42470000
 800194c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1ea      	bne.n	8001932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8097 	beq.w	8001a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4b81      	ldr	r3, [pc, #516]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a7c      	ldr	r2, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b77      	ldr	r3, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a6:	4b74      	ldr	r3, [pc, #464]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a73      	ldr	r2, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fbd5 	bl	8001160 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff fbd1 	bl	8001160 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e10c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x474>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x2ea>
 80019e0:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6713      	str	r3, [r2, #112]	; 0x70
 80019ec:	e01c      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x30c>
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	4a5e      	ldr	r2, [pc, #376]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6713      	str	r3, [r2, #112]	; 0x70
 8001a02:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	4a5b      	ldr	r2, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0x324>
 8001a10:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a57      	ldr	r2, [pc, #348]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a54      	ldr	r2, [pc, #336]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f023 0304 	bic.w	r3, r3, #4
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d015      	beq.n	8001a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff fb96 	bl	8001160 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff fb92 	bl	8001160 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0cb      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ee      	beq.n	8001a38 <HAL_RCC_OscConfig+0x334>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fb80 	bl	8001160 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff fb7c 	bl	8001160 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0b5      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ee      	bne.n	8001a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a1 	beq.w	8001be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d05c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d141      	bne.n	8001b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fb50 	bl	8001160 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fb4c 	bl	8001160 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e087      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	491b      	ldr	r1, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fb25 	bl	8001160 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fb21 	bl	8001160 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e05c      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x416>
 8001b38:	e054      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_RCC_OscConfig+0x478>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fb0e 	bl	8001160 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff fb0a 	bl	8001160 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e045      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x444>
 8001b66:	e03d      	b.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e038      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x4ec>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d028      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d121      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d11a      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d111      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0cc      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d90c      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d044      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d119      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e06f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e067      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4934      	ldr	r1, [pc, #208]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff fa3c 	bl	8001160 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7ff fa38 	bl	8001160 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e04f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d20c      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490a      	ldr	r1, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f99c 	bl	80010d8 <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00
 8001db0:	40023800 	.word	0x40023800
 8001db4:	0800584c 	.word	0x0800584c
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	20000058 	.word	0x20000058

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc4:	b094      	sub	sp, #80	; 0x50
 8001dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	647b      	str	r3, [r7, #68]	; 0x44
 8001dcc:	2300      	movs	r3, #0
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd8:	4b79      	ldr	r3, [pc, #484]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d00d      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	f200 80e1 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001df2:	e0db      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001df8:	e0db      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfa:	4b73      	ldr	r3, [pc, #460]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dfe:	e0d8      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e00:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0a:	4b6d      	ldr	r3, [pc, #436]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e16:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e32:	4622      	mov	r2, r4
 8001e34:	462b      	mov	r3, r5
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	0159      	lsls	r1, r3, #5
 8001e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e44:	0150      	lsls	r0, r2, #5
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	1a51      	subs	r1, r2, r1
 8001e4e:	6139      	str	r1, [r7, #16]
 8001e50:	4629      	mov	r1, r5
 8001e52:	eb63 0301 	sbc.w	r3, r3, r1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e64:	4659      	mov	r1, fp
 8001e66:	018b      	lsls	r3, r1, #6
 8001e68:	4651      	mov	r1, sl
 8001e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e6e:	4651      	mov	r1, sl
 8001e70:	018a      	lsls	r2, r1, #6
 8001e72:	4651      	mov	r1, sl
 8001e74:	ebb2 0801 	subs.w	r8, r2, r1
 8001e78:	4659      	mov	r1, fp
 8001e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e92:	4690      	mov	r8, r2
 8001e94:	4699      	mov	r9, r3
 8001e96:	4623      	mov	r3, r4
 8001e98:	eb18 0303 	adds.w	r3, r8, r3
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	462b      	mov	r3, r5
 8001ea0:	eb49 0303 	adc.w	r3, r9, r3
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	024b      	lsls	r3, r1, #9
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	024a      	lsls	r2, r1, #9
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ed0:	f7fe f9e6 	bl	80002a0 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001edc:	e058      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ede:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	099b      	lsrs	r3, r3, #6
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	4611      	mov	r1, r2
 8001eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ef8:	4642      	mov	r2, r8
 8001efa:	464b      	mov	r3, r9
 8001efc:	f04f 0000 	mov.w	r0, #0
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	0159      	lsls	r1, r3, #5
 8001f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f0a:	0150      	lsls	r0, r2, #5
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4641      	mov	r1, r8
 8001f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f16:	4649      	mov	r1, r9
 8001f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f30:	ebb2 040a 	subs.w	r4, r2, sl
 8001f34:	eb63 050b 	sbc.w	r5, r3, fp
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	00eb      	lsls	r3, r5, #3
 8001f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f46:	00e2      	lsls	r2, r4, #3
 8001f48:	4614      	mov	r4, r2
 8001f4a:	461d      	mov	r5, r3
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	18e3      	adds	r3, r4, r3
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	464b      	mov	r3, r9
 8001f54:	eb45 0303 	adc.w	r3, r5, r3
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f66:	4629      	mov	r1, r5
 8001f68:	028b      	lsls	r3, r1, #10
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f70:	4621      	mov	r1, r4
 8001f72:	028a      	lsls	r2, r1, #10
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	61fa      	str	r2, [r7, #28]
 8001f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f84:	f7fe f98c 	bl	80002a0 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3750      	adds	r7, #80	; 0x50
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200

08001fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fe8:	f7ff fff0 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	4903      	ldr	r1, [pc, #12]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	0800585c 	.word	0x0800585c

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002010:	f7ff ffdc 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0b5b      	lsrs	r3, r3, #13
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	; (8002030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	0800585c 	.word	0x0800585c

08002034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e03f      	b.n	80020c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe fd4c 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2224      	movs	r2, #36	; 0x24
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f929 	bl	80022d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800208c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800209c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b08a      	sub	sp, #40	; 0x28
 80020d2:	af02      	add	r7, sp, #8
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	4613      	mov	r3, r2
 80020dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d17c      	bne.n	80021e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_UART_Transmit+0x2c>
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e075      	b.n	80021ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_UART_Transmit+0x3e>
 8002108:	2302      	movs	r3, #2
 800210a:	e06e      	b.n	80021ea <HAL_UART_Transmit+0x11c>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2221      	movs	r2, #33	; 0x21
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002122:	f7ff f81d 	bl	8001160 <HAL_GetTick>
 8002126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	88fa      	ldrh	r2, [r7, #6]
 800212c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	88fa      	ldrh	r2, [r7, #6]
 8002132:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213c:	d108      	bne.n	8002150 <HAL_UART_Transmit+0x82>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d104      	bne.n	8002150 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	e003      	b.n	8002158 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002160:	e02a      	b.n	80021b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f840 	bl	80021f2 <UART_WaitOnFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e036      	b.n	80021ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10b      	bne.n	800219a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002190:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	3302      	adds	r3, #2
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	e007      	b.n	80021aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	3301      	adds	r3, #1
 80021a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1cf      	bne.n	8002162 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2200      	movs	r2, #0
 80021ca:	2140      	movs	r1, #64	; 0x40
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f810 	bl	80021f2 <UART_WaitOnFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e006      	b.n	80021ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e000      	b.n	80021ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
  }
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b090      	sub	sp, #64	; 0x40
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	4613      	mov	r3, r2
 8002200:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002202:	e050      	b.n	80022a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800220a:	d04c      	beq.n	80022a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800220c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <UART_WaitOnFlagUntilTimeout+0x30>
 8002212:	f7fe ffa5 	bl	8001160 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800221e:	429a      	cmp	r2, r3
 8002220:	d241      	bcs.n	80022a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	330c      	adds	r3, #12
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	e853 3f00 	ldrex	r3, [r3]
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	330c      	adds	r3, #12
 8002240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002242:	637a      	str	r2, [r7, #52]	; 0x34
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800224a:	e841 2300 	strex	r3, r2, [r1]
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1e5      	bne.n	8002222 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3314      	adds	r3, #20
 800225c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	e853 3f00 	ldrex	r3, [r3]
 8002264:	613b      	str	r3, [r7, #16]
   return(result);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3314      	adds	r3, #20
 8002274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002276:	623a      	str	r2, [r7, #32]
 8002278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800227a:	69f9      	ldr	r1, [r7, #28]
 800227c:	6a3a      	ldr	r2, [r7, #32]
 800227e:	e841 2300 	strex	r3, r2, [r1]
 8002282:	61bb      	str	r3, [r7, #24]
   return(result);
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1e5      	bne.n	8002256 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e00f      	b.n	80022c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4013      	ands	r3, r2
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	bf0c      	ite	eq
 80022b6:	2301      	moveq	r3, #1
 80022b8:	2300      	movne	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d09f      	beq.n	8002204 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3740      	adds	r7, #64	; 0x40
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d4:	b0c0      	sub	sp, #256	; 0x100
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ec:	68d9      	ldr	r1, [r3, #12]
 80022ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	ea40 0301 	orr.w	r3, r0, r1
 80022f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	431a      	orrs	r2, r3
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	431a      	orrs	r2, r3
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002328:	f021 010c 	bic.w	r1, r1, #12
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002336:	430b      	orrs	r3, r1
 8002338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234a:	6999      	ldr	r1, [r3, #24]
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	ea40 0301 	orr.w	r3, r0, r1
 8002356:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b8f      	ldr	r3, [pc, #572]	; (800259c <UART_SetConfig+0x2cc>)
 8002360:	429a      	cmp	r2, r3
 8002362:	d005      	beq.n	8002370 <UART_SetConfig+0xa0>
 8002364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b8d      	ldr	r3, [pc, #564]	; (80025a0 <UART_SetConfig+0x2d0>)
 800236c:	429a      	cmp	r2, r3
 800236e:	d104      	bne.n	800237a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002370:	f7ff fe4c 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002374:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002378:	e003      	b.n	8002382 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800237a:	f7ff fe33 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 800237e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800238c:	f040 810c 	bne.w	80025a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002394:	2200      	movs	r2, #0
 8002396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800239a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800239e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80023a2:	4622      	mov	r2, r4
 80023a4:	462b      	mov	r3, r5
 80023a6:	1891      	adds	r1, r2, r2
 80023a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80023aa:	415b      	adcs	r3, r3
 80023ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023b2:	4621      	mov	r1, r4
 80023b4:	eb12 0801 	adds.w	r8, r2, r1
 80023b8:	4629      	mov	r1, r5
 80023ba:	eb43 0901 	adc.w	r9, r3, r1
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023d2:	4690      	mov	r8, r2
 80023d4:	4699      	mov	r9, r3
 80023d6:	4623      	mov	r3, r4
 80023d8:	eb18 0303 	adds.w	r3, r8, r3
 80023dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023e0:	462b      	mov	r3, r5
 80023e2:	eb49 0303 	adc.w	r3, r9, r3
 80023e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023fe:	460b      	mov	r3, r1
 8002400:	18db      	adds	r3, r3, r3
 8002402:	653b      	str	r3, [r7, #80]	; 0x50
 8002404:	4613      	mov	r3, r2
 8002406:	eb42 0303 	adc.w	r3, r2, r3
 800240a:	657b      	str	r3, [r7, #84]	; 0x54
 800240c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002410:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002414:	f7fd ff44 	bl	80002a0 <__aeabi_uldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4b61      	ldr	r3, [pc, #388]	; (80025a4 <UART_SetConfig+0x2d4>)
 800241e:	fba3 2302 	umull	r2, r3, r3, r2
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	011c      	lsls	r4, r3, #4
 8002426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800242a:	2200      	movs	r2, #0
 800242c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002430:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002438:	4642      	mov	r2, r8
 800243a:	464b      	mov	r3, r9
 800243c:	1891      	adds	r1, r2, r2
 800243e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002440:	415b      	adcs	r3, r3
 8002442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002448:	4641      	mov	r1, r8
 800244a:	eb12 0a01 	adds.w	sl, r2, r1
 800244e:	4649      	mov	r1, r9
 8002450:	eb43 0b01 	adc.w	fp, r3, r1
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002460:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002468:	4692      	mov	sl, r2
 800246a:	469b      	mov	fp, r3
 800246c:	4643      	mov	r3, r8
 800246e:	eb1a 0303 	adds.w	r3, sl, r3
 8002472:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002476:	464b      	mov	r3, r9
 8002478:	eb4b 0303 	adc.w	r3, fp, r3
 800247c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800248c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002490:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002494:	460b      	mov	r3, r1
 8002496:	18db      	adds	r3, r3, r3
 8002498:	643b      	str	r3, [r7, #64]	; 0x40
 800249a:	4613      	mov	r3, r2
 800249c:	eb42 0303 	adc.w	r3, r2, r3
 80024a0:	647b      	str	r3, [r7, #68]	; 0x44
 80024a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024aa:	f7fd fef9 	bl	80002a0 <__aeabi_uldivmod>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4611      	mov	r1, r2
 80024b4:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <UART_SetConfig+0x2d4>)
 80024b6:	fba3 2301 	umull	r2, r3, r3, r1
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2264      	movs	r2, #100	; 0x64
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	1acb      	subs	r3, r1, r3
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024ca:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <UART_SetConfig+0x2d4>)
 80024cc:	fba3 2302 	umull	r2, r3, r3, r2
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024d8:	441c      	add	r4, r3
 80024da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024de:	2200      	movs	r2, #0
 80024e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024ec:	4642      	mov	r2, r8
 80024ee:	464b      	mov	r3, r9
 80024f0:	1891      	adds	r1, r2, r2
 80024f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80024f4:	415b      	adcs	r3, r3
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024fc:	4641      	mov	r1, r8
 80024fe:	1851      	adds	r1, r2, r1
 8002500:	6339      	str	r1, [r7, #48]	; 0x30
 8002502:	4649      	mov	r1, r9
 8002504:	414b      	adcs	r3, r1
 8002506:	637b      	str	r3, [r7, #52]	; 0x34
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002514:	4659      	mov	r1, fp
 8002516:	00cb      	lsls	r3, r1, #3
 8002518:	4651      	mov	r1, sl
 800251a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800251e:	4651      	mov	r1, sl
 8002520:	00ca      	lsls	r2, r1, #3
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	4603      	mov	r3, r0
 8002528:	4642      	mov	r2, r8
 800252a:	189b      	adds	r3, r3, r2
 800252c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002530:	464b      	mov	r3, r9
 8002532:	460a      	mov	r2, r1
 8002534:	eb42 0303 	adc.w	r3, r2, r3
 8002538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002548:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800254c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002550:	460b      	mov	r3, r1
 8002552:	18db      	adds	r3, r3, r3
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
 8002556:	4613      	mov	r3, r2
 8002558:	eb42 0303 	adc.w	r3, r2, r3
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002562:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002566:	f7fd fe9b 	bl	80002a0 <__aeabi_uldivmod>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <UART_SetConfig+0x2d4>)
 8002570:	fba3 1302 	umull	r1, r3, r3, r2
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	2164      	movs	r1, #100	; 0x64
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	3332      	adds	r3, #50	; 0x32
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <UART_SetConfig+0x2d4>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	f003 0207 	and.w	r2, r3, #7
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4422      	add	r2, r4
 8002596:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002598:	e105      	b.n	80027a6 <UART_SetConfig+0x4d6>
 800259a:	bf00      	nop
 800259c:	40011000 	.word	0x40011000
 80025a0:	40011400 	.word	0x40011400
 80025a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ac:	2200      	movs	r2, #0
 80025ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025ba:	4642      	mov	r2, r8
 80025bc:	464b      	mov	r3, r9
 80025be:	1891      	adds	r1, r2, r2
 80025c0:	6239      	str	r1, [r7, #32]
 80025c2:	415b      	adcs	r3, r3
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
 80025c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ca:	4641      	mov	r1, r8
 80025cc:	1854      	adds	r4, r2, r1
 80025ce:	4649      	mov	r1, r9
 80025d0:	eb43 0501 	adc.w	r5, r3, r1
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	00eb      	lsls	r3, r5, #3
 80025de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025e2:	00e2      	lsls	r2, r4, #3
 80025e4:	4614      	mov	r4, r2
 80025e6:	461d      	mov	r5, r3
 80025e8:	4643      	mov	r3, r8
 80025ea:	18e3      	adds	r3, r4, r3
 80025ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025f0:	464b      	mov	r3, r9
 80025f2:	eb45 0303 	adc.w	r3, r5, r3
 80025f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002606:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002616:	4629      	mov	r1, r5
 8002618:	008b      	lsls	r3, r1, #2
 800261a:	4621      	mov	r1, r4
 800261c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002620:	4621      	mov	r1, r4
 8002622:	008a      	lsls	r2, r1, #2
 8002624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002628:	f7fd fe3a 	bl	80002a0 <__aeabi_uldivmod>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <UART_SetConfig+0x4e4>)
 8002632:	fba3 2302 	umull	r2, r3, r3, r2
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	011c      	lsls	r4, r3, #4
 800263a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800263e:	2200      	movs	r2, #0
 8002640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002644:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800264c:	4642      	mov	r2, r8
 800264e:	464b      	mov	r3, r9
 8002650:	1891      	adds	r1, r2, r2
 8002652:	61b9      	str	r1, [r7, #24]
 8002654:	415b      	adcs	r3, r3
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800265c:	4641      	mov	r1, r8
 800265e:	1851      	adds	r1, r2, r1
 8002660:	6139      	str	r1, [r7, #16]
 8002662:	4649      	mov	r1, r9
 8002664:	414b      	adcs	r3, r1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002674:	4659      	mov	r1, fp
 8002676:	00cb      	lsls	r3, r1, #3
 8002678:	4651      	mov	r1, sl
 800267a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800267e:	4651      	mov	r1, sl
 8002680:	00ca      	lsls	r2, r1, #3
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	4603      	mov	r3, r0
 8002688:	4642      	mov	r2, r8
 800268a:	189b      	adds	r3, r3, r2
 800268c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002690:	464b      	mov	r3, r9
 8002692:	460a      	mov	r2, r1
 8002694:	eb42 0303 	adc.w	r3, r2, r3
 8002698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80026a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026b4:	4649      	mov	r1, r9
 80026b6:	008b      	lsls	r3, r1, #2
 80026b8:	4641      	mov	r1, r8
 80026ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026be:	4641      	mov	r1, r8
 80026c0:	008a      	lsls	r2, r1, #2
 80026c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026c6:	f7fd fdeb 	bl	80002a0 <__aeabi_uldivmod>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <UART_SetConfig+0x4e4>)
 80026d0:	fba3 1302 	umull	r1, r3, r3, r2
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	2164      	movs	r1, #100	; 0x64
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	3332      	adds	r3, #50	; 0x32
 80026e2:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <UART_SetConfig+0x4e4>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ee:	441c      	add	r4, r3
 80026f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026f4:	2200      	movs	r2, #0
 80026f6:	673b      	str	r3, [r7, #112]	; 0x70
 80026f8:	677a      	str	r2, [r7, #116]	; 0x74
 80026fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026fe:	4642      	mov	r2, r8
 8002700:	464b      	mov	r3, r9
 8002702:	1891      	adds	r1, r2, r2
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	415b      	adcs	r3, r3
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800270e:	4641      	mov	r1, r8
 8002710:	1851      	adds	r1, r2, r1
 8002712:	6039      	str	r1, [r7, #0]
 8002714:	4649      	mov	r1, r9
 8002716:	414b      	adcs	r3, r1
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002726:	4659      	mov	r1, fp
 8002728:	00cb      	lsls	r3, r1, #3
 800272a:	4651      	mov	r1, sl
 800272c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002730:	4651      	mov	r1, sl
 8002732:	00ca      	lsls	r2, r1, #3
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	4603      	mov	r3, r0
 800273a:	4642      	mov	r2, r8
 800273c:	189b      	adds	r3, r3, r2
 800273e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002740:	464b      	mov	r3, r9
 8002742:	460a      	mov	r2, r1
 8002744:	eb42 0303 	adc.w	r3, r2, r3
 8002748:	66fb      	str	r3, [r7, #108]	; 0x6c
 800274a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	663b      	str	r3, [r7, #96]	; 0x60
 8002754:	667a      	str	r2, [r7, #100]	; 0x64
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002762:	4649      	mov	r1, r9
 8002764:	008b      	lsls	r3, r1, #2
 8002766:	4641      	mov	r1, r8
 8002768:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800276c:	4641      	mov	r1, r8
 800276e:	008a      	lsls	r2, r1, #2
 8002770:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002774:	f7fd fd94 	bl	80002a0 <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <UART_SetConfig+0x4e4>)
 800277e:	fba3 1302 	umull	r1, r3, r3, r2
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2164      	movs	r1, #100	; 0x64
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	3332      	adds	r3, #50	; 0x32
 8002790:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <UART_SetConfig+0x4e4>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	f003 020f 	and.w	r2, r3, #15
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4422      	add	r2, r4
 80027a4:	609a      	str	r2, [r3, #8]
}
 80027a6:	bf00      	nop
 80027a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027ac:	46bd      	mov	sp, r7
 80027ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027b2:	bf00      	nop
 80027b4:	51eb851f 	.word	0x51eb851f

080027b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80027c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ca:	2b84      	cmp	r3, #132	; 0x84
 80027cc:	d005      	beq.n	80027da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80027ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4413      	add	r3, r2
 80027d6:	3303      	adds	r3, #3
 80027d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80027ec:	f000 ff66 	bl	80036bc <vTaskStartScheduler>
  
  return osOK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80027f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f8:	b089      	sub	sp, #36	; 0x24
 80027fa:	af04      	add	r7, sp, #16
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d020      	beq.n	800284a <osThreadCreate+0x54>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01c      	beq.n	800284a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685c      	ldr	r4, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681d      	ldr	r5, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691e      	ldr	r6, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff ffc8 	bl	80027b8 <makeFreeRtosPriority>
 8002828:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002832:	9202      	str	r2, [sp, #8]
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	9100      	str	r1, [sp, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4632      	mov	r2, r6
 800283c:	4629      	mov	r1, r5
 800283e:	4620      	mov	r0, r4
 8002840:	f000 fcee 	bl	8003220 <xTaskCreateStatic>
 8002844:	4603      	mov	r3, r0
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e01c      	b.n	8002884 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685c      	ldr	r4, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002856:	b29e      	uxth	r6, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ffaa 	bl	80027b8 <makeFreeRtosPriority>
 8002864:	4602      	mov	r2, r0
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	9200      	str	r2, [sp, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	4632      	mov	r2, r6
 8002872:	4629      	mov	r1, r5
 8002874:	4620      	mov	r0, r4
 8002876:	f000 fd30 	bl	80032da <xTaskCreate>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d001      	beq.n	8002884 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002884:	68fb      	ldr	r3, [r7, #12]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800288e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <osDelay+0x16>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	e000      	b.n	80028a6 <osDelay+0x18>
 80028a4:	2301      	movs	r3, #1
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fed4 	bl	8003654 <vTaskDelay>
  
  return osOK;
 80028ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f103 0208 	add.w	r2, r3, #8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f103 0208 	add.w	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f103 0208 	add.w	r2, r3, #8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	601a      	str	r2, [r3, #0]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800296e:	d103      	bne.n	8002978 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e00c      	b.n	8002992 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3308      	adds	r3, #8
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e002      	b.n	8002986 <vListInsert+0x2e>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d2f6      	bcs.n	8002980 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6892      	ldr	r2, [r2, #8]
 80029e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6852      	ldr	r2, [r2, #4]
 80029ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d103      	bne.n	80029fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <xQueueGenericReset+0x2a>
	__asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	60bb      	str	r3, [r7, #8]
}
 8002a46:	bf00      	nop
 8002a48:	e7fe      	b.n	8002a48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a4a:	f001 fdbb 	bl	80045c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	68f9      	ldr	r1, [r7, #12]
 8002a58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	441a      	add	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	68f9      	ldr	r1, [r7, #12]
 8002a7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	441a      	add	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	22ff      	movs	r2, #255	; 0xff
 8002a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d114      	bne.n	8002aca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01a      	beq.n	8002ade <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3310      	adds	r3, #16
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 f87b 	bl	8003ba8 <xTaskRemoveFromEventList>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d012      	beq.n	8002ade <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <xQueueGenericReset+0xcc>)
 8002aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	e009      	b.n	8002ade <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	3310      	adds	r3, #16
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fef1 	bl	80028b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3324      	adds	r3, #36	; 0x24
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff feec 	bl	80028b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ade:	f001 fda1 	bl	8004624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	e000ed04 	.word	0xe000ed04

08002af0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	4613      	mov	r3, r2
 8002afc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	613b      	str	r3, [r7, #16]
}
 8002b16:	bf00      	nop
 8002b18:	e7fe      	b.n	8002b18 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3348      	adds	r3, #72	; 0x48
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 fe2d 	bl	8004788 <pvPortMalloc>
 8002b2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d011      	beq.n	8002b5a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3348      	adds	r3, #72	; 0x48
 8002b3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b48:	79fa      	ldrb	r2, [r7, #7]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f805 	bl	8002b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d103      	bne.n	8002b80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e002      	b.n	8002b86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b92:	2101      	movs	r1, #1
 8002b94:	69b8      	ldr	r0, [r7, #24]
 8002b96:	f7ff ff43 	bl	8002a20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00e      	beq.n	8002bce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f81d 	bl	8002c08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002be0:	2301      	movs	r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	2300      	movs	r3, #0
 8002be6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	461a      	mov	r2, r3
 8002bec:	6939      	ldr	r1, [r7, #16]
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f7ff ff7e 	bl	8002af0 <xQueueGenericCreate>
 8002bf4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff ffd3 	bl	8002ba2 <prvInitialiseMutex>

		return xNewQueue;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
	}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08e      	sub	sp, #56	; 0x38
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c16:	2300      	movs	r3, #0
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <xQueueGenericSend+0x32>
	__asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d103      	bne.n	8002c48 <xQueueGenericSend+0x40>
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <xQueueGenericSend+0x44>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <xQueueGenericSend+0x46>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10a      	bne.n	8002c68 <xQueueGenericSend+0x60>
	__asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c64:	bf00      	nop
 8002c66:	e7fe      	b.n	8002c66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d103      	bne.n	8002c76 <xQueueGenericSend+0x6e>
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <xQueueGenericSend+0x72>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <xQueueGenericSend+0x74>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	623b      	str	r3, [r7, #32]
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c96:	f001 f943 	bl	8003f20 <xTaskGetSchedulerState>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <xQueueGenericSend+0x9e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <xQueueGenericSend+0xa2>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <xQueueGenericSend+0xa4>
 8002caa:	2300      	movs	r3, #0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10a      	bne.n	8002cc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	61fb      	str	r3, [r7, #28]
}
 8002cc2:	bf00      	nop
 8002cc4:	e7fe      	b.n	8002cc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cc6:	f001 fc7d 	bl	80045c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <xQueueGenericSend+0xd4>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d129      	bne.n	8002d30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce2:	f000 f9b3 	bl	800304c <prvCopyDataToQueue>
 8002ce6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d010      	beq.n	8002d12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	3324      	adds	r3, #36	; 0x24
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 ff57 	bl	8003ba8 <xTaskRemoveFromEventList>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d00:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <xQueueGenericSend+0x1f8>)
 8002d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	e00a      	b.n	8002d28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d18:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <xQueueGenericSend+0x1f8>)
 8002d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d28:	f001 fc7c 	bl	8004624 <vPortExitCritical>
				return pdPASS;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e063      	b.n	8002df8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d36:	f001 fc75 	bl	8004624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e05c      	b.n	8002df8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 ff8f 	bl	8003c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d52:	f001 fc67 	bl	8004624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d56:	f000 fd11 	bl	800377c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d5a:	f001 fc33 	bl	80045c4 <vPortEnterCritical>
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d64:	b25b      	sxtb	r3, r3
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d6a:	d103      	bne.n	8002d74 <xQueueGenericSend+0x16c>
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d80:	d103      	bne.n	8002d8a <xQueueGenericSend+0x182>
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d8a:	f001 fc4b 	bl	8004624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d8e:	1d3a      	adds	r2, r7, #4
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 ff7e 	bl	8003c98 <xTaskCheckForTimeOut>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d124      	bne.n	8002dec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002da4:	f000 fa24 	bl	80031f0 <prvIsQueueFull>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d018      	beq.n	8002de0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	3310      	adds	r3, #16
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fed2 	bl	8003b60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dbe:	f000 f9af 	bl	8003120 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dc2:	f000 fce9 	bl	8003798 <xTaskResumeAll>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f47f af7c 	bne.w	8002cc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <xQueueGenericSend+0x1f8>)
 8002dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	e772      	b.n	8002cc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002de2:	f000 f99d 	bl	8003120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002de6:	f000 fcd7 	bl	8003798 <xTaskResumeAll>
 8002dea:	e76c      	b.n	8002cc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dee:	f000 f997 	bl	8003120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002df2:	f000 fcd1 	bl	8003798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002df6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3738      	adds	r7, #56	; 0x38
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	e000ed04 	.word	0xe000ed04

08002e04 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08e      	sub	sp, #56	; 0x38
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	623b      	str	r3, [r7, #32]
}
 8002e32:	bf00      	nop
 8002e34:	e7fe      	b.n	8002e34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	61fb      	str	r3, [r7, #28]
}
 8002e50:	bf00      	nop
 8002e52:	e7fe      	b.n	8002e52 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e54:	f001 f864 	bl	8003f20 <xTaskGetSchedulerState>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <xQueueSemaphoreTake+0x60>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <xQueueSemaphoreTake+0x64>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <xQueueSemaphoreTake+0x66>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	61bb      	str	r3, [r7, #24]
}
 8002e80:	bf00      	nop
 8002e82:	e7fe      	b.n	8002e82 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e84:	f001 fb9e 	bl	80045c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d024      	beq.n	8002ede <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	1e5a      	subs	r2, r3, #1
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d104      	bne.n	8002eae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002ea4:	f001 f9e4 	bl	8004270 <pvTaskIncrementMutexHeldCount>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00f      	beq.n	8002ed6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	3310      	adds	r3, #16
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fe74 	bl	8003ba8 <xTaskRemoveFromEventList>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ec6:	4b54      	ldr	r3, [pc, #336]	; (8003018 <xQueueSemaphoreTake+0x214>)
 8002ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ed6:	f001 fba5 	bl	8004624 <vPortExitCritical>
				return pdPASS;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e097      	b.n	800300e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d111      	bne.n	8002f08 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	617b      	str	r3, [r7, #20]
}
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002f00:	f001 fb90 	bl	8004624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e082      	b.n	800300e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f0e:	f107 030c 	add.w	r3, r7, #12
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 feaa 	bl	8003c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f1c:	f001 fb82 	bl	8004624 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f20:	f000 fc2c 	bl	800377c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f24:	f001 fb4e 	bl	80045c4 <vPortEnterCritical>
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f34:	d103      	bne.n	8002f3e <xQueueSemaphoreTake+0x13a>
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4a:	d103      	bne.n	8002f54 <xQueueSemaphoreTake+0x150>
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f54:	f001 fb66 	bl	8004624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f58:	463a      	mov	r2, r7
 8002f5a:	f107 030c 	add.w	r3, r7, #12
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fe99 	bl	8003c98 <xTaskCheckForTimeOut>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d132      	bne.n	8002fd2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f6e:	f000 f929 	bl	80031c4 <prvIsQueueEmpty>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d026      	beq.n	8002fc6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002f80:	f001 fb20 	bl	80045c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 ffe7 	bl	8003f5c <xTaskPriorityInherit>
 8002f8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002f90:	f001 fb48 	bl	8004624 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	3324      	adds	r3, #36	; 0x24
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fddf 	bl	8003b60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fa4:	f000 f8bc 	bl	8003120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fa8:	f000 fbf6 	bl	8003798 <xTaskResumeAll>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f47f af68 	bne.w	8002e84 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <xQueueSemaphoreTake+0x214>)
 8002fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	e75e      	b.n	8002e84 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fc8:	f000 f8aa 	bl	8003120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fcc:	f000 fbe4 	bl	8003798 <xTaskResumeAll>
 8002fd0:	e758      	b.n	8002e84 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002fd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fd4:	f000 f8a4 	bl	8003120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fd8:	f000 fbde 	bl	8003798 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fde:	f000 f8f1 	bl	80031c4 <prvIsQueueEmpty>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f43f af4d 	beq.w	8002e84 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00d      	beq.n	800300c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002ff0:	f001 fae8 	bl	80045c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002ff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ff6:	f000 f811 	bl	800301c <prvGetDisinheritPriorityAfterTimeout>
 8002ffa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003002:	4618      	mov	r0, r3
 8003004:	f001 f8a6 	bl	8004154 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003008:	f001 fb0c 	bl	8004624 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800300c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800300e:	4618      	mov	r0, r3
 8003010:	3738      	adds	r7, #56	; 0x38
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e001      	b.n	800303e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800303e:	68fb      	ldr	r3, [r7, #12]
	}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10d      	bne.n	8003086 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d14d      	bne.n	800310e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 ffe6 	bl	8004048 <xTaskPriorityDisinherit>
 800307c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	e043      	b.n	800310e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d119      	bne.n	80030c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6858      	ldr	r0, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	461a      	mov	r2, r3
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	f001 fd8a 	bl	8004bb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	441a      	add	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d32b      	bcc.n	800310e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	e026      	b.n	800310e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68d8      	ldr	r0, [r3, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	461a      	mov	r2, r3
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	f001 fd70 	bl	8004bb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	425b      	negs	r3, r3
 80030da:	441a      	add	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d207      	bcs.n	80030fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	425b      	negs	r3, r3
 80030f6:	441a      	add	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d105      	bne.n	800310e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	3b01      	subs	r3, #1
 800310c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003116:	697b      	ldr	r3, [r7, #20]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003128:	f001 fa4c 	bl	80045c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003132:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003134:	e011      	b.n	800315a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b00      	cmp	r3, #0
 800313c:	d012      	beq.n	8003164 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3324      	adds	r3, #36	; 0x24
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fd30 	bl	8003ba8 <xTaskRemoveFromEventList>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800314e:	f000 fe05 	bl	8003d5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	3b01      	subs	r3, #1
 8003156:	b2db      	uxtb	r3, r3
 8003158:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800315a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315e:	2b00      	cmp	r3, #0
 8003160:	dce9      	bgt.n	8003136 <prvUnlockQueue+0x16>
 8003162:	e000      	b.n	8003166 <prvUnlockQueue+0x46>
					break;
 8003164:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	22ff      	movs	r2, #255	; 0xff
 800316a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800316e:	f001 fa59 	bl	8004624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003172:	f001 fa27 	bl	80045c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800317c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800317e:	e011      	b.n	80031a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d012      	beq.n	80031ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3310      	adds	r3, #16
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fd0b 	bl	8003ba8 <xTaskRemoveFromEventList>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003198:	f000 fde0 	bl	8003d5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800319c:	7bbb      	ldrb	r3, [r7, #14]
 800319e:	3b01      	subs	r3, #1
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	dce9      	bgt.n	8003180 <prvUnlockQueue+0x60>
 80031ac:	e000      	b.n	80031b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	22ff      	movs	r2, #255	; 0xff
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031b8:	f001 fa34 	bl	8004624 <vPortExitCritical>
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031cc:	f001 f9fa 	bl	80045c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031d8:	2301      	movs	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	e001      	b.n	80031e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031e2:	f001 fa1f 	bl	8004624 <vPortExitCritical>

	return xReturn;
 80031e6:	68fb      	ldr	r3, [r7, #12]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031f8:	f001 f9e4 	bl	80045c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	429a      	cmp	r2, r3
 8003206:	d102      	bne.n	800320e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003208:	2301      	movs	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	e001      	b.n	8003212 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003212:	f001 fa07 	bl	8004624 <vPortExitCritical>

	return xReturn;
 8003216:	68fb      	ldr	r3, [r7, #12]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08e      	sub	sp, #56	; 0x38
 8003224:	af04      	add	r7, sp, #16
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800322e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	623b      	str	r3, [r7, #32]
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <xTaskCreateStatic+0x46>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	61fb      	str	r3, [r7, #28]
}
 8003262:	bf00      	nop
 8003264:	e7fe      	b.n	8003264 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003266:	2354      	movs	r3, #84	; 0x54
 8003268:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b54      	cmp	r3, #84	; 0x54
 800326e:	d00a      	beq.n	8003286 <xTaskCreateStatic+0x66>
	__asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	61bb      	str	r3, [r7, #24]
}
 8003282:	bf00      	nop
 8003284:	e7fe      	b.n	8003284 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003286:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01e      	beq.n	80032cc <xTaskCreateStatic+0xac>
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800329c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032a6:	2300      	movs	r3, #0
 80032a8:	9303      	str	r3, [sp, #12]
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	9302      	str	r3, [sp, #8]
 80032ae:	f107 0314 	add.w	r3, r7, #20
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f850 	bl	8003364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032c6:	f000 f8dd 	bl	8003484 <prvAddNewTaskToReadyList>
 80032ca:	e001      	b.n	80032d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032d0:	697b      	ldr	r3, [r7, #20]
	}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3728      	adds	r7, #40	; 0x28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b08c      	sub	sp, #48	; 0x30
 80032de:	af04      	add	r7, sp, #16
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f001 fa4a 	bl	8004788 <pvPortMalloc>
 80032f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00e      	beq.n	800331a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032fc:	2054      	movs	r0, #84	; 0x54
 80032fe:	f001 fa43 	bl	8004788 <pvPortMalloc>
 8003302:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
 8003310:	e005      	b.n	800331e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003312:	6978      	ldr	r0, [r7, #20]
 8003314:	f001 fb04 	bl	8004920 <vPortFree>
 8003318:	e001      	b.n	800331e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d017      	beq.n	8003354 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	2300      	movs	r3, #0
 8003330:	9303      	str	r3, [sp, #12]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	9302      	str	r3, [sp, #8]
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f80e 	bl	8003364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003348:	69f8      	ldr	r0, [r7, #28]
 800334a:	f000 f89b 	bl	8003484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800334e:	2301      	movs	r3, #1
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	e002      	b.n	800335a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003358:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800335a:	69bb      	ldr	r3, [r7, #24]
	}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	461a      	mov	r2, r3
 800337c:	21a5      	movs	r1, #165	; 0xa5
 800337e:	f001 fc25 	bl	8004bcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800338c:	3b01      	subs	r3, #1
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f023 0307 	bic.w	r3, r3, #7
 800339a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	617b      	str	r3, [r7, #20]
}
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01f      	beq.n	8003402 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e012      	b.n	80033ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	7819      	ldrb	r1, [r3, #0]
 80033d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	3334      	adds	r3, #52	; 0x34
 80033d8:	460a      	mov	r2, r1
 80033da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d006      	beq.n	80033f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3301      	adds	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	2b0f      	cmp	r3, #15
 80033f2:	d9e9      	bls.n	80033c8 <prvInitialiseNewTask+0x64>
 80033f4:	e000      	b.n	80033f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80033f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003400:	e003      	b.n	800340a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	2b06      	cmp	r3, #6
 800340e:	d901      	bls.n	8003414 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003410:	2306      	movs	r3, #6
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003418:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	2200      	movs	r2, #0
 8003424:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	3304      	adds	r3, #4
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fa63 	bl	80028f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	3318      	adds	r3, #24
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fa5e 	bl	80028f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	f1c3 0207 	rsb	r2, r3, #7
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	2200      	movs	r2, #0
 8003454:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	68f9      	ldr	r1, [r7, #12]
 8003462:	69b8      	ldr	r0, [r7, #24]
 8003464:	f000 ff7e 	bl	8004364 <pxPortInitialiseStack>
 8003468:	4602      	mov	r2, r0
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800347a:	bf00      	nop
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800348c:	f001 f89a 	bl	80045c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003490:	4b2a      	ldr	r3, [pc, #168]	; (800353c <prvAddNewTaskToReadyList+0xb8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	4a29      	ldr	r2, [pc, #164]	; (800353c <prvAddNewTaskToReadyList+0xb8>)
 8003498:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800349a:	4b29      	ldr	r3, [pc, #164]	; (8003540 <prvAddNewTaskToReadyList+0xbc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034a2:	4a27      	ldr	r2, [pc, #156]	; (8003540 <prvAddNewTaskToReadyList+0xbc>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034a8:	4b24      	ldr	r3, [pc, #144]	; (800353c <prvAddNewTaskToReadyList+0xb8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d110      	bne.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034b0:	f000 fc78 	bl	8003da4 <prvInitialiseTaskLists>
 80034b4:	e00d      	b.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <prvAddNewTaskToReadyList+0xc0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <prvAddNewTaskToReadyList+0xbc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d802      	bhi.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034cc:	4a1c      	ldr	r2, [pc, #112]	; (8003540 <prvAddNewTaskToReadyList+0xbc>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <prvAddNewTaskToReadyList+0xc4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3301      	adds	r3, #1
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <prvAddNewTaskToReadyList+0xc4>)
 80034da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	2201      	movs	r2, #1
 80034e2:	409a      	lsls	r2, r3
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <prvAddNewTaskToReadyList+0xc8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	4a18      	ldr	r2, [pc, #96]	; (800354c <prvAddNewTaskToReadyList+0xc8>)
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4a15      	ldr	r2, [pc, #84]	; (8003550 <prvAddNewTaskToReadyList+0xcc>)
 80034fc:	441a      	add	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f7ff fa03 	bl	8002910 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800350a:	f001 f88b 	bl	8004624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <prvAddNewTaskToReadyList+0xc0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00e      	beq.n	8003534 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <prvAddNewTaskToReadyList+0xbc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	429a      	cmp	r2, r3
 8003522:	d207      	bcs.n	8003534 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <prvAddNewTaskToReadyList+0xd0>)
 8003526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	200004a8 	.word	0x200004a8
 8003540:	200003a8 	.word	0x200003a8
 8003544:	200004b4 	.word	0x200004b4
 8003548:	200004c4 	.word	0x200004c4
 800354c:	200004b0 	.word	0x200004b0
 8003550:	200003ac 	.word	0x200003ac
 8003554:	e000ed04 	.word	0xe000ed04

08003558 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	; 0x28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <vTaskDelayUntil+0x2a>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	617b      	str	r3, [r7, #20]
}
 800357e:	bf00      	nop
 8003580:	e7fe      	b.n	8003580 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <vTaskDelayUntil+0x46>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	613b      	str	r3, [r7, #16]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800359e:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <vTaskDelayUntil+0xf0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <vTaskDelayUntil+0x64>
	__asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	60fb      	str	r3, [r7, #12]
}
 80035b8:	bf00      	nop
 80035ba:	e7fe      	b.n	80035ba <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80035bc:	f000 f8de 	bl	800377c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80035c0:	4b22      	ldr	r3, [pc, #136]	; (800364c <vTaskDelayUntil+0xf4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	4413      	add	r3, r2
 80035ce:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d20b      	bcs.n	80035f2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d211      	bcs.n	8003608 <vTaskDelayUntil+0xb0>
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d90d      	bls.n	8003608 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	e00a      	b.n	8003608 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d303      	bcc.n	8003604 <vTaskDelayUntil+0xac>
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	429a      	cmp	r2, r3
 8003602:	d901      	bls.n	8003608 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003604:	2301      	movs	r3, #1
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	2b00      	cmp	r3, #0
 8003612:	d006      	beq.n	8003622 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fe3b 	bl	8004298 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003622:	f000 f8b9 	bl	8003798 <xTaskResumeAll>
 8003626:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d107      	bne.n	800363e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800362e:	4b08      	ldr	r3, [pc, #32]	; (8003650 <vTaskDelayUntil+0xf8>)
 8003630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800363e:	bf00      	nop
 8003640:	3728      	adds	r7, #40	; 0x28
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200004d0 	.word	0x200004d0
 800364c:	200004ac 	.word	0x200004ac
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d017      	beq.n	8003696 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <vTaskDelay+0x60>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <vTaskDelay+0x30>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	60bb      	str	r3, [r7, #8]
}
 8003680:	bf00      	nop
 8003682:	e7fe      	b.n	8003682 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003684:	f000 f87a 	bl	800377c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003688:	2100      	movs	r1, #0
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fe04 	bl	8004298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003690:	f000 f882 	bl	8003798 <xTaskResumeAll>
 8003694:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <vTaskDelay+0x64>)
 800369e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200004d0 	.word	0x200004d0
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036ca:	463a      	mov	r2, r7
 80036cc:	1d39      	adds	r1, r7, #4
 80036ce:	f107 0308 	add.w	r3, r7, #8
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc ff66 	bl	80005a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036d8:	6839      	ldr	r1, [r7, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	9202      	str	r2, [sp, #8]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	2300      	movs	r3, #0
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	2300      	movs	r3, #0
 80036e8:	460a      	mov	r2, r1
 80036ea:	491e      	ldr	r1, [pc, #120]	; (8003764 <vTaskStartScheduler+0xa8>)
 80036ec:	481e      	ldr	r0, [pc, #120]	; (8003768 <vTaskStartScheduler+0xac>)
 80036ee:	f7ff fd97 	bl	8003220 <xTaskCreateStatic>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4a1d      	ldr	r2, [pc, #116]	; (800376c <vTaskStartScheduler+0xb0>)
 80036f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036f8:	4b1c      	ldr	r3, [pc, #112]	; (800376c <vTaskStartScheduler+0xb0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003700:	2301      	movs	r3, #1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e001      	b.n	800370a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d116      	bne.n	800373e <vTaskStartScheduler+0x82>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	613b      	str	r3, [r7, #16]
}
 8003722:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <vTaskStartScheduler+0xb4>)
 8003726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800372a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <vTaskStartScheduler+0xb8>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003732:	4b11      	ldr	r3, [pc, #68]	; (8003778 <vTaskStartScheduler+0xbc>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003738:	f000 fea2 	bl	8004480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800373c:	e00e      	b.n	800375c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003744:	d10a      	bne.n	800375c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	60fb      	str	r3, [r7, #12]
}
 8003758:	bf00      	nop
 800375a:	e7fe      	b.n	800375a <vTaskStartScheduler+0x9e>
}
 800375c:	bf00      	nop
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	08005844 	.word	0x08005844
 8003768:	08003d75 	.word	0x08003d75
 800376c:	200004cc 	.word	0x200004cc
 8003770:	200004c8 	.word	0x200004c8
 8003774:	200004b4 	.word	0x200004b4
 8003778:	200004ac 	.word	0x200004ac

0800377c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <vTaskSuspendAll+0x18>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	4a03      	ldr	r2, [pc, #12]	; (8003794 <vTaskSuspendAll+0x18>)
 8003788:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800378a:	bf00      	nop
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	200004d0 	.word	0x200004d0

08003798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037a6:	4b41      	ldr	r3, [pc, #260]	; (80038ac <xTaskResumeAll+0x114>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	603b      	str	r3, [r7, #0]
}
 80037c0:	bf00      	nop
 80037c2:	e7fe      	b.n	80037c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037c4:	f000 fefe 	bl	80045c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037c8:	4b38      	ldr	r3, [pc, #224]	; (80038ac <xTaskResumeAll+0x114>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	4a37      	ldr	r2, [pc, #220]	; (80038ac <xTaskResumeAll+0x114>)
 80037d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037d2:	4b36      	ldr	r3, [pc, #216]	; (80038ac <xTaskResumeAll+0x114>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d161      	bne.n	800389e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037da:	4b35      	ldr	r3, [pc, #212]	; (80038b0 <xTaskResumeAll+0x118>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d05d      	beq.n	800389e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037e2:	e02e      	b.n	8003842 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e4:	4b33      	ldr	r3, [pc, #204]	; (80038b4 <xTaskResumeAll+0x11c>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3318      	adds	r3, #24
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff f8ea 	bl	80029ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3304      	adds	r3, #4
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f8e5 	bl	80029ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	2201      	movs	r2, #1
 8003806:	409a      	lsls	r2, r3
 8003808:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <xTaskResumeAll+0x120>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	4a2a      	ldr	r2, [pc, #168]	; (80038b8 <xTaskResumeAll+0x120>)
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4a27      	ldr	r2, [pc, #156]	; (80038bc <xTaskResumeAll+0x124>)
 8003820:	441a      	add	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3304      	adds	r3, #4
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f7ff f871 	bl	8002910 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003832:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <xTaskResumeAll+0x128>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	429a      	cmp	r2, r3
 800383a:	d302      	bcc.n	8003842 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800383c:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <xTaskResumeAll+0x12c>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003842:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <xTaskResumeAll+0x11c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1cc      	bne.n	80037e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003850:	f000 fb46 	bl	8003ee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003854:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <xTaskResumeAll+0x130>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d010      	beq.n	8003882 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003860:	f000 f86a 	bl	8003938 <xTaskIncrementTick>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800386a:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <xTaskResumeAll+0x12c>)
 800386c:	2201      	movs	r2, #1
 800386e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3b01      	subs	r3, #1
 8003874:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f1      	bne.n	8003860 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800387c:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <xTaskResumeAll+0x130>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <xTaskResumeAll+0x12c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800388a:	2301      	movs	r3, #1
 800388c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <xTaskResumeAll+0x134>)
 8003890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800389e:	f000 fec1 	bl	8004624 <vPortExitCritical>

	return xAlreadyYielded;
 80038a2:	68bb      	ldr	r3, [r7, #8]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200004d0 	.word	0x200004d0
 80038b0:	200004a8 	.word	0x200004a8
 80038b4:	20000468 	.word	0x20000468
 80038b8:	200004b0 	.word	0x200004b0
 80038bc:	200003ac 	.word	0x200003ac
 80038c0:	200003a8 	.word	0x200003a8
 80038c4:	200004bc 	.word	0x200004bc
 80038c8:	200004b8 	.word	0x200004b8
 80038cc:	e000ed04 	.word	0xe000ed04

080038d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <xTaskGetTickCount+0x1c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038dc:	687b      	ldr	r3, [r7, #4]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	200004ac 	.word	0x200004ac

080038f0 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <pcTaskGetName+0x14>
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <pcTaskGetName+0x44>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	e000      	b.n	8003906 <pcTaskGetName+0x16>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10a      	bne.n	8003924 <pcTaskGetName+0x34>
	__asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	60bb      	str	r3, [r7, #8]
}
 8003920:	bf00      	nop
 8003922:	e7fe      	b.n	8003922 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3334      	adds	r3, #52	; 0x34
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	200003a8 	.word	0x200003a8

08003938 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003942:	4b4e      	ldr	r3, [pc, #312]	; (8003a7c <xTaskIncrementTick+0x144>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f040 808e 	bne.w	8003a68 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800394c:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <xTaskIncrementTick+0x148>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003954:	4a4a      	ldr	r2, [pc, #296]	; (8003a80 <xTaskIncrementTick+0x148>)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d120      	bne.n	80039a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003960:	4b48      	ldr	r3, [pc, #288]	; (8003a84 <xTaskIncrementTick+0x14c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <xTaskIncrementTick+0x48>
	__asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	603b      	str	r3, [r7, #0]
}
 800397c:	bf00      	nop
 800397e:	e7fe      	b.n	800397e <xTaskIncrementTick+0x46>
 8003980:	4b40      	ldr	r3, [pc, #256]	; (8003a84 <xTaskIncrementTick+0x14c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <xTaskIncrementTick+0x150>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a3e      	ldr	r2, [pc, #248]	; (8003a84 <xTaskIncrementTick+0x14c>)
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	4a3e      	ldr	r2, [pc, #248]	; (8003a88 <xTaskIncrementTick+0x150>)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b3d      	ldr	r3, [pc, #244]	; (8003a8c <xTaskIncrementTick+0x154>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3301      	adds	r3, #1
 800399a:	4a3c      	ldr	r2, [pc, #240]	; (8003a8c <xTaskIncrementTick+0x154>)
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	f000 fa9f 	bl	8003ee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039a2:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <xTaskIncrementTick+0x158>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d348      	bcc.n	8003a3e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ac:	4b35      	ldr	r3, [pc, #212]	; (8003a84 <xTaskIncrementTick+0x14c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d104      	bne.n	80039c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b6:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <xTaskIncrementTick+0x158>)
 80039b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039bc:	601a      	str	r2, [r3, #0]
					break;
 80039be:	e03e      	b.n	8003a3e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c0:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <xTaskIncrementTick+0x14c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d203      	bcs.n	80039e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039d8:	4a2d      	ldr	r2, [pc, #180]	; (8003a90 <xTaskIncrementTick+0x158>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039de:	e02e      	b.n	8003a3e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	3304      	adds	r3, #4
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fff0 	bl	80029ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	3318      	adds	r3, #24
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe ffe7 	bl	80029ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	2201      	movs	r2, #1
 8003a02:	409a      	lsls	r2, r3
 8003a04:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <xTaskIncrementTick+0x15c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <xTaskIncrementTick+0x15c>)
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <xTaskIncrementTick+0x160>)
 8003a1c:	441a      	add	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	3304      	adds	r3, #4
 8003a22:	4619      	mov	r1, r3
 8003a24:	4610      	mov	r0, r2
 8003a26:	f7fe ff73 	bl	8002910 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <xTaskIncrementTick+0x164>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d3b9      	bcc.n	80039ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a3c:	e7b6      	b.n	80039ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a3e:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <xTaskIncrementTick+0x164>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	4914      	ldr	r1, [pc, #80]	; (8003a98 <xTaskIncrementTick+0x160>)
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d901      	bls.n	8003a5a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <xTaskIncrementTick+0x168>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003a62:	2301      	movs	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e004      	b.n	8003a72 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <xTaskIncrementTick+0x16c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	4a0d      	ldr	r2, [pc, #52]	; (8003aa4 <xTaskIncrementTick+0x16c>)
 8003a70:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a72:	697b      	ldr	r3, [r7, #20]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200004d0 	.word	0x200004d0
 8003a80:	200004ac 	.word	0x200004ac
 8003a84:	20000460 	.word	0x20000460
 8003a88:	20000464 	.word	0x20000464
 8003a8c:	200004c0 	.word	0x200004c0
 8003a90:	200004c8 	.word	0x200004c8
 8003a94:	200004b0 	.word	0x200004b0
 8003a98:	200003ac 	.word	0x200003ac
 8003a9c:	200003a8 	.word	0x200003a8
 8003aa0:	200004bc 	.word	0x200004bc
 8003aa4:	200004b8 	.word	0x200004b8

08003aa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003aae:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <vTaskSwitchContext+0xa4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ab6:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <vTaskSwitchContext+0xa8>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003abc:	e03f      	b.n	8003b3e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <vTaskSwitchContext+0xa8>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac4:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <vTaskSwitchContext+0xac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ad2:	7afb      	ldrb	r3, [r7, #11]
 8003ad4:	f1c3 031f 	rsb	r3, r3, #31
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	491f      	ldr	r1, [pc, #124]	; (8003b58 <vTaskSwitchContext+0xb0>)
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	607b      	str	r3, [r7, #4]
}
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <vTaskSwitchContext+0x5a>
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <vTaskSwitchContext+0xb0>)
 8003b10:	4413      	add	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	3308      	adds	r3, #8
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d104      	bne.n	8003b34 <vTaskSwitchContext+0x8c>
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <vTaskSwitchContext+0xb4>)
 8003b3c:	6013      	str	r3, [r2, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	200004d0 	.word	0x200004d0
 8003b50:	200004bc 	.word	0x200004bc
 8003b54:	200004b0 	.word	0x200004b0
 8003b58:	200003ac 	.word	0x200003ac
 8003b5c:	200003a8 	.word	0x200003a8

08003b60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	60fb      	str	r3, [r7, #12]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <vTaskPlaceOnEventList+0x44>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fe fee2 	bl	8002958 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b94:	2101      	movs	r1, #1
 8003b96:	6838      	ldr	r0, [r7, #0]
 8003b98:	f000 fb7e 	bl	8004298 <prvAddCurrentTaskToDelayedList>
}
 8003b9c:	bf00      	nop
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	200003a8 	.word	0x200003a8

08003ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	60fb      	str	r3, [r7, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	3318      	adds	r3, #24
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe fef6 	bl	80029ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bde:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <xTaskRemoveFromEventList+0xac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11c      	bne.n	8003c20 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe feed 	bl	80029ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <xTaskRemoveFromEventList+0xb0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <xTaskRemoveFromEventList+0xb0>)
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <xTaskRemoveFromEventList+0xb4>)
 8003c10:	441a      	add	r2, r3
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	3304      	adds	r3, #4
 8003c16:	4619      	mov	r1, r3
 8003c18:	4610      	mov	r0, r2
 8003c1a:	f7fe fe79 	bl	8002910 <vListInsertEnd>
 8003c1e:	e005      	b.n	8003c2c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	3318      	adds	r3, #24
 8003c24:	4619      	mov	r1, r3
 8003c26:	480e      	ldr	r0, [pc, #56]	; (8003c60 <xTaskRemoveFromEventList+0xb8>)
 8003c28:	f7fe fe72 	bl	8002910 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <xTaskRemoveFromEventList+0xbc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d905      	bls.n	8003c46 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <xTaskRemoveFromEventList+0xc0>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e001      	b.n	8003c4a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c4a:	697b      	ldr	r3, [r7, #20]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	200004d0 	.word	0x200004d0
 8003c58:	200004b0 	.word	0x200004b0
 8003c5c:	200003ac 	.word	0x200003ac
 8003c60:	20000468 	.word	0x20000468
 8003c64:	200003a8 	.word	0x200003a8
 8003c68:	200004bc 	.word	0x200004bc

08003c6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <vTaskInternalSetTimeOutState+0x24>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <vTaskInternalSetTimeOutState+0x28>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	605a      	str	r2, [r3, #4]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	200004c0 	.word	0x200004c0
 8003c94:	200004ac 	.word	0x200004ac

08003c98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	613b      	str	r3, [r7, #16]
}
 8003cba:	bf00      	nop
 8003cbc:	e7fe      	b.n	8003cbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	60fb      	str	r3, [r7, #12]
}
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003cda:	f000 fc73 	bl	80045c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cde:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <xTaskCheckForTimeOut+0xbc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf6:	d102      	bne.n	8003cfe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	e023      	b.n	8003d46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <xTaskCheckForTimeOut+0xc0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d007      	beq.n	8003d1a <xTaskCheckForTimeOut+0x82>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	e015      	b.n	8003d46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d20b      	bcs.n	8003d3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad2      	subs	r2, r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ff9b 	bl	8003c6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	e004      	b.n	8003d46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d46:	f000 fc6d 	bl	8004624 <vPortExitCritical>

	return xReturn;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	200004ac 	.word	0x200004ac
 8003d58:	200004c0 	.word	0x200004c0

08003d5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <vTaskMissedYield+0x14>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	200004bc 	.word	0x200004bc

08003d74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d7c:	f000 f852 	bl	8003e24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <prvIdleTask+0x28>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d9f9      	bls.n	8003d7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <prvIdleTask+0x2c>)
 8003d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d98:	e7f0      	b.n	8003d7c <prvIdleTask+0x8>
 8003d9a:	bf00      	nop
 8003d9c:	200003ac 	.word	0x200003ac
 8003da0:	e000ed04 	.word	0xe000ed04

08003da4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003daa:	2300      	movs	r3, #0
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	e00c      	b.n	8003dca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <prvInitialiseTaskLists+0x60>)
 8003dbc:	4413      	add	r3, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe fd79 	bl	80028b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b06      	cmp	r3, #6
 8003dce:	d9ef      	bls.n	8003db0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dd0:	480d      	ldr	r0, [pc, #52]	; (8003e08 <prvInitialiseTaskLists+0x64>)
 8003dd2:	f7fe fd70 	bl	80028b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dd6:	480d      	ldr	r0, [pc, #52]	; (8003e0c <prvInitialiseTaskLists+0x68>)
 8003dd8:	f7fe fd6d 	bl	80028b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ddc:	480c      	ldr	r0, [pc, #48]	; (8003e10 <prvInitialiseTaskLists+0x6c>)
 8003dde:	f7fe fd6a 	bl	80028b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003de2:	480c      	ldr	r0, [pc, #48]	; (8003e14 <prvInitialiseTaskLists+0x70>)
 8003de4:	f7fe fd67 	bl	80028b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003de8:	480b      	ldr	r0, [pc, #44]	; (8003e18 <prvInitialiseTaskLists+0x74>)
 8003dea:	f7fe fd64 	bl	80028b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <prvInitialiseTaskLists+0x78>)
 8003df0:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <prvInitialiseTaskLists+0x64>)
 8003df2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <prvInitialiseTaskLists+0x7c>)
 8003df6:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <prvInitialiseTaskLists+0x68>)
 8003df8:	601a      	str	r2, [r3, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200003ac 	.word	0x200003ac
 8003e08:	20000438 	.word	0x20000438
 8003e0c:	2000044c 	.word	0x2000044c
 8003e10:	20000468 	.word	0x20000468
 8003e14:	2000047c 	.word	0x2000047c
 8003e18:	20000494 	.word	0x20000494
 8003e1c:	20000460 	.word	0x20000460
 8003e20:	20000464 	.word	0x20000464

08003e24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e2a:	e019      	b.n	8003e60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e2c:	f000 fbca 	bl	80045c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e30:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <prvCheckTasksWaitingTermination+0x50>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe fdc4 	bl	80029ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e42:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <prvCheckTasksWaitingTermination+0x54>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <prvCheckTasksWaitingTermination+0x54>)
 8003e4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <prvCheckTasksWaitingTermination+0x58>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <prvCheckTasksWaitingTermination+0x58>)
 8003e54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e56:	f000 fbe5 	bl	8004624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f810 	bl	8003e80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <prvCheckTasksWaitingTermination+0x58>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e1      	bne.n	8003e2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	2000047c 	.word	0x2000047c
 8003e78:	200004a8 	.word	0x200004a8
 8003e7c:	20000490 	.word	0x20000490

08003e80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d108      	bne.n	8003ea4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fd42 	bl	8004920 <vPortFree>
				vPortFree( pxTCB );
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fd3f 	bl	8004920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ea2:	e018      	b.n	8003ed6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d103      	bne.n	8003eb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fd36 	bl	8004920 <vPortFree>
	}
 8003eb4:	e00f      	b.n	8003ed6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d00a      	beq.n	8003ed6 <prvDeleteTCB+0x56>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	60fb      	str	r3, [r7, #12]
}
 8003ed2:	bf00      	nop
 8003ed4:	e7fe      	b.n	8003ed4 <prvDeleteTCB+0x54>
	}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <prvResetNextTaskUnblockTime+0x38>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <prvResetNextTaskUnblockTime+0x3c>)
 8003ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ef6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ef8:	e008      	b.n	8003f0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <prvResetNextTaskUnblockTime+0x38>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <prvResetNextTaskUnblockTime+0x3c>)
 8003f0a:	6013      	str	r3, [r2, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	20000460 	.word	0x20000460
 8003f1c:	200004c8 	.word	0x200004c8

08003f20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <xTaskGetSchedulerState+0x34>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	607b      	str	r3, [r7, #4]
 8003f32:	e008      	b.n	8003f46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f34:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <xTaskGetSchedulerState+0x38>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d102      	bne.n	8003f42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	e001      	b.n	8003f46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f42:	2300      	movs	r3, #0
 8003f44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f46:	687b      	ldr	r3, [r7, #4]
	}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	200004b4 	.word	0x200004b4
 8003f58:	200004d0 	.word	0x200004d0

08003f5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d05e      	beq.n	8004030 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f76:	4b31      	ldr	r3, [pc, #196]	; (800403c <xTaskPriorityInherit+0xe0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d24e      	bcs.n	800401e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	db06      	blt.n	8003f96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f88:	4b2c      	ldr	r3, [pc, #176]	; (800403c <xTaskPriorityInherit+0xe0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	f1c3 0207 	rsb	r2, r3, #7
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6959      	ldr	r1, [r3, #20]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4a26      	ldr	r2, [pc, #152]	; (8004040 <xTaskPriorityInherit+0xe4>)
 8003fa8:	4413      	add	r3, r2
 8003faa:	4299      	cmp	r1, r3
 8003fac:	d12f      	bne.n	800400e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fd09 	bl	80029ca <uxListRemove>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43da      	mvns	r2, r3
 8003fca:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <xTaskPriorityInherit+0xe8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <xTaskPriorityInherit+0xe8>)
 8003fd2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <xTaskPriorityInherit+0xe0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	4b17      	ldr	r3, [pc, #92]	; (8004044 <xTaskPriorityInherit+0xe8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	4a15      	ldr	r2, [pc, #84]	; (8004044 <xTaskPriorityInherit+0xe8>)
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4a10      	ldr	r2, [pc, #64]	; (8004040 <xTaskPriorityInherit+0xe4>)
 8003ffe:	441a      	add	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f7fe fc82 	bl	8002910 <vListInsertEnd>
 800400c:	e004      	b.n	8004018 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <xTaskPriorityInherit+0xe0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004018:	2301      	movs	r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e008      	b.n	8004030 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004022:	4b06      	ldr	r3, [pc, #24]	; (800403c <xTaskPriorityInherit+0xe0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	429a      	cmp	r2, r3
 800402a:	d201      	bcs.n	8004030 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800402c:	2301      	movs	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004030:	68fb      	ldr	r3, [r7, #12]
	}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	200003a8 	.word	0x200003a8
 8004040:	200003ac 	.word	0x200003ac
 8004044:	200004b0 	.word	0x200004b0

08004048 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d06e      	beq.n	800413c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800405e:	4b3a      	ldr	r3, [pc, #232]	; (8004148 <xTaskPriorityDisinherit+0x100>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d00a      	beq.n	800407e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	60fb      	str	r3, [r7, #12]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	60bb      	str	r3, [r7, #8]
}
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a0:	1e5a      	subs	r2, r3, #1
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d044      	beq.n	800413c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d140      	bne.n	800413c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	3304      	adds	r3, #4
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fc83 	bl	80029ca <uxListRemove>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d115      	bne.n	80040f6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	491f      	ldr	r1, [pc, #124]	; (800414c <xTaskPriorityDisinherit+0x104>)
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <xTaskPriorityDisinherit+0xae>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	2201      	movs	r2, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43da      	mvns	r2, r3
 80040ec:	4b18      	ldr	r3, [pc, #96]	; (8004150 <xTaskPriorityDisinherit+0x108>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4013      	ands	r3, r2
 80040f2:	4a17      	ldr	r2, [pc, #92]	; (8004150 <xTaskPriorityDisinherit+0x108>)
 80040f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	f1c3 0207 	rsb	r2, r3, #7
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	2201      	movs	r2, #1
 8004110:	409a      	lsls	r2, r3
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <xTaskPriorityDisinherit+0x108>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <xTaskPriorityDisinherit+0x108>)
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4a08      	ldr	r2, [pc, #32]	; (800414c <xTaskPriorityDisinherit+0x104>)
 800412a:	441a      	add	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f7fe fbec 	bl	8002910 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004138:	2301      	movs	r3, #1
 800413a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800413c:	697b      	ldr	r3, [r7, #20]
	}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200003a8 	.word	0x200003a8
 800414c:	200003ac 	.word	0x200003ac
 8004150:	200004b0 	.word	0x200004b0

08004154 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004162:	2301      	movs	r3, #1
 8004164:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d077      	beq.n	800425c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	60fb      	str	r3, [r7, #12]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d902      	bls.n	800419a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	e002      	b.n	80041a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d058      	beq.n	800425c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d153      	bne.n	800425c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80041b4:	4b2b      	ldr	r3, [pc, #172]	; (8004264 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d10a      	bne.n	80041d4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	60bb      	str	r3, [r7, #8]
}
 80041d0:	bf00      	nop
 80041d2:	e7fe      	b.n	80041d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	db04      	blt.n	80041f2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f1c3 0207 	rsb	r2, r3, #7
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	6959      	ldr	r1, [r3, #20]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004202:	4413      	add	r3, r2
 8004204:	4299      	cmp	r1, r3
 8004206:	d129      	bne.n	800425c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	3304      	adds	r3, #4
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fbdc 	bl	80029ca <uxListRemove>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	2201      	movs	r2, #1
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43da      	mvns	r2, r3
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4013      	ands	r3, r2
 800422a:	4a10      	ldr	r2, [pc, #64]	; (800426c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800422c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	2201      	movs	r2, #1
 8004234:	409a      	lsls	r2, r3
 8004236:	4b0d      	ldr	r3, [pc, #52]	; (800426c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4313      	orrs	r3, r2
 800423c:	4a0b      	ldr	r2, [pc, #44]	; (800426c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4a06      	ldr	r2, [pc, #24]	; (8004268 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800424e:	441a      	add	r2, r3
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	3304      	adds	r3, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f7fe fb5a 	bl	8002910 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800425c:	bf00      	nop
 800425e:	3720      	adds	r7, #32
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200003a8 	.word	0x200003a8
 8004268:	200003ac 	.word	0x200003ac
 800426c:	200004b0 	.word	0x200004b0

08004270 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004274:	4b07      	ldr	r3, [pc, #28]	; (8004294 <pvTaskIncrementMutexHeldCount+0x24>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <pvTaskIncrementMutexHeldCount+0x24>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004282:	3201      	adds	r2, #1
 8004284:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004286:	4b03      	ldr	r3, [pc, #12]	; (8004294 <pvTaskIncrementMutexHeldCount+0x24>)
 8004288:	681b      	ldr	r3, [r3, #0]
	}
 800428a:	4618      	mov	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	200003a8 	.word	0x200003a8

08004298 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042a2:	4b29      	ldr	r3, [pc, #164]	; (8004348 <prvAddCurrentTaskToDelayedList+0xb0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042a8:	4b28      	ldr	r3, [pc, #160]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fb8b 	bl	80029ca <uxListRemove>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80042ba:	4b24      	ldr	r3, [pc, #144]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	2201      	movs	r2, #1
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43da      	mvns	r2, r3
 80042c8:	4b21      	ldr	r3, [pc, #132]	; (8004350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4013      	ands	r3, r2
 80042ce:	4a20      	ldr	r2, [pc, #128]	; (8004350 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d8:	d10a      	bne.n	80042f0 <prvAddCurrentTaskToDelayedList+0x58>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3304      	adds	r3, #4
 80042e6:	4619      	mov	r1, r3
 80042e8:	481a      	ldr	r0, [pc, #104]	; (8004354 <prvAddCurrentTaskToDelayedList+0xbc>)
 80042ea:	f7fe fb11 	bl	8002910 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042ee:	e026      	b.n	800433e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042f8:	4b14      	ldr	r3, [pc, #80]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	429a      	cmp	r2, r3
 8004306:	d209      	bcs.n	800431c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <prvAddCurrentTaskToDelayedList+0xc0>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7fe fb1f 	bl	8002958 <vListInsert>
}
 800431a:	e010      	b.n	800433e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800431c:	4b0f      	ldr	r3, [pc, #60]	; (800435c <prvAddCurrentTaskToDelayedList+0xc4>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b0a      	ldr	r3, [pc, #40]	; (800434c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3304      	adds	r3, #4
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f7fe fb15 	bl	8002958 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	d202      	bcs.n	800433e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004338:	4a09      	ldr	r2, [pc, #36]	; (8004360 <prvAddCurrentTaskToDelayedList+0xc8>)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6013      	str	r3, [r2, #0]
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	200004ac 	.word	0x200004ac
 800434c:	200003a8 	.word	0x200003a8
 8004350:	200004b0 	.word	0x200004b0
 8004354:	20000494 	.word	0x20000494
 8004358:	20000464 	.word	0x20000464
 800435c:	20000460 	.word	0x20000460
 8004360:	200004c8 	.word	0x200004c8

08004364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b04      	subs	r3, #4
 8004374:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800437c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3b04      	subs	r3, #4
 8004382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f023 0201 	bic.w	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b04      	subs	r3, #4
 8004392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004394:	4a0c      	ldr	r2, [pc, #48]	; (80043c8 <pxPortInitialiseStack+0x64>)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3b14      	subs	r3, #20
 800439e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3b04      	subs	r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f06f 0202 	mvn.w	r2, #2
 80043b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3b20      	subs	r3, #32
 80043b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043ba:	68fb      	ldr	r3, [r7, #12]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	080043cd 	.word	0x080043cd

080043cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <prvTaskExitError+0x54>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043de:	d00a      	beq.n	80043f6 <prvTaskExitError+0x2a>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60fb      	str	r3, [r7, #12]
}
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <prvTaskExitError+0x28>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60bb      	str	r3, [r7, #8]
}
 8004408:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800440a:	bf00      	nop
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0fc      	beq.n	800440c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	20000060 	.word	0x20000060
	...

08004430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <pxCurrentTCBConst2>)
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	6808      	ldr	r0, [r1, #0]
 8004436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	f380 8809 	msr	PSP, r0
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8811 	msr	BASEPRI, r0
 800444a:	4770      	bx	lr
 800444c:	f3af 8000 	nop.w

08004450 <pxCurrentTCBConst2>:
 8004450:	200003a8 	.word	0x200003a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004458:	4808      	ldr	r0, [pc, #32]	; (800447c <prvPortStartFirstTask+0x24>)
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	6800      	ldr	r0, [r0, #0]
 800445e:	f380 8808 	msr	MSP, r0
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8814 	msr	CONTROL, r0
 800446a:	b662      	cpsie	i
 800446c:	b661      	cpsie	f
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	df00      	svc	0
 8004478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800447a:	bf00      	nop
 800447c:	e000ed08 	.word	0xe000ed08

08004480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004486:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <xPortStartScheduler+0x120>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a46      	ldr	r2, [pc, #280]	; (80045a4 <xPortStartScheduler+0x124>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10a      	bne.n	80044a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	613b      	str	r3, [r7, #16]
}
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044a6:	4b3e      	ldr	r3, [pc, #248]	; (80045a0 <xPortStartScheduler+0x120>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3f      	ldr	r2, [pc, #252]	; (80045a8 <xPortStartScheduler+0x128>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d10a      	bne.n	80044c6 <xPortStartScheduler+0x46>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044c6:	4b39      	ldr	r3, [pc, #228]	; (80045ac <xPortStartScheduler+0x12c>)
 80044c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	22ff      	movs	r2, #255	; 0xff
 80044d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <xPortStartScheduler+0x130>)
 80044ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <xPortStartScheduler+0x134>)
 80044f0:	2207      	movs	r2, #7
 80044f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f4:	e009      	b.n	800450a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80044f6:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <xPortStartScheduler+0x134>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	4a2d      	ldr	r2, [pc, #180]	; (80045b4 <xPortStartScheduler+0x134>)
 80044fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004512:	2b80      	cmp	r3, #128	; 0x80
 8004514:	d0ef      	beq.n	80044f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004516:	4b27      	ldr	r3, [pc, #156]	; (80045b4 <xPortStartScheduler+0x134>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f1c3 0307 	rsb	r3, r3, #7
 800451e:	2b04      	cmp	r3, #4
 8004520:	d00a      	beq.n	8004538 <xPortStartScheduler+0xb8>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	60bb      	str	r3, [r7, #8]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <xPortStartScheduler+0x134>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <xPortStartScheduler+0x134>)
 8004540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004542:	4b1c      	ldr	r3, [pc, #112]	; (80045b4 <xPortStartScheduler+0x134>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800454a:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <xPortStartScheduler+0x134>)
 800454c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <xPortStartScheduler+0x138>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <xPortStartScheduler+0x138>)
 800455c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <xPortStartScheduler+0x138>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <xPortStartScheduler+0x138>)
 8004568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800456c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800456e:	f000 f8dd 	bl	800472c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004572:	4b12      	ldr	r3, [pc, #72]	; (80045bc <xPortStartScheduler+0x13c>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004578:	f000 f8fc 	bl	8004774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <xPortStartScheduler+0x140>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0f      	ldr	r2, [pc, #60]	; (80045c0 <xPortStartScheduler+0x140>)
 8004582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004588:	f7ff ff66 	bl	8004458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800458c:	f7ff fa8c 	bl	8003aa8 <vTaskSwitchContext>
	prvTaskExitError();
 8004590:	f7ff ff1c 	bl	80043cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	e000ed00 	.word	0xe000ed00
 80045a4:	410fc271 	.word	0x410fc271
 80045a8:	410fc270 	.word	0x410fc270
 80045ac:	e000e400 	.word	0xe000e400
 80045b0:	200004d4 	.word	0x200004d4
 80045b4:	200004d8 	.word	0x200004d8
 80045b8:	e000ed20 	.word	0xe000ed20
 80045bc:	20000060 	.word	0x20000060
 80045c0:	e000ef34 	.word	0xe000ef34

080045c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	607b      	str	r3, [r7, #4]
}
 80045dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045de:	4b0f      	ldr	r3, [pc, #60]	; (800461c <vPortEnterCritical+0x58>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a0d      	ldr	r2, [pc, #52]	; (800461c <vPortEnterCritical+0x58>)
 80045e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <vPortEnterCritical+0x58>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d10f      	bne.n	8004610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <vPortEnterCritical+0x5c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <vPortEnterCritical+0x4c>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	603b      	str	r3, [r7, #0]
}
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <vPortEnterCritical+0x4a>
	}
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	20000060 	.word	0x20000060
 8004620:	e000ed04 	.word	0xe000ed04

08004624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <vPortExitCritical+0x50>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <vPortExitCritical+0x24>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	607b      	str	r3, [r7, #4]
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <vPortExitCritical+0x50>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3b01      	subs	r3, #1
 800464e:	4a09      	ldr	r2, [pc, #36]	; (8004674 <vPortExitCritical+0x50>)
 8004650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004652:	4b08      	ldr	r3, [pc, #32]	; (8004674 <vPortExitCritical+0x50>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d105      	bne.n	8004666 <vPortExitCritical+0x42>
 800465a:	2300      	movs	r3, #0
 800465c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000060 	.word	0x20000060
	...

08004680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004680:	f3ef 8009 	mrs	r0, PSP
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <pxCurrentTCBConst>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	f01e 0f10 	tst.w	lr, #16
 8004690:	bf08      	it	eq
 8004692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469a:	6010      	str	r0, [r2, #0]
 800469c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046a4:	f380 8811 	msr	BASEPRI, r0
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f7ff f9fa 	bl	8003aa8 <vTaskSwitchContext>
 80046b4:	f04f 0000 	mov.w	r0, #0
 80046b8:	f380 8811 	msr	BASEPRI, r0
 80046bc:	bc09      	pop	{r0, r3}
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	6808      	ldr	r0, [r1, #0]
 80046c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c6:	f01e 0f10 	tst.w	lr, #16
 80046ca:	bf08      	it	eq
 80046cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046d0:	f380 8809 	msr	PSP, r0
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	f3af 8000 	nop.w

080046e0 <pxCurrentTCBConst>:
 80046e0:	200003a8 	.word	0x200003a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop

080046e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	607b      	str	r3, [r7, #4]
}
 8004700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004702:	f7ff f919 	bl	8003938 <xTaskIncrementTick>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <xPortSysTickHandler+0x40>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f383 8811 	msr	BASEPRI, r3
}
 800471e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	e000ed04 	.word	0xe000ed04

0800472c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <vPortSetupTimerInterrupt+0x34>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <vPortSetupTimerInterrupt+0x38>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800473c:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <vPortSetupTimerInterrupt+0x3c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0a      	ldr	r2, [pc, #40]	; (800476c <vPortSetupTimerInterrupt+0x40>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	099b      	lsrs	r3, r3, #6
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <vPortSetupTimerInterrupt+0x44>)
 800474a:	3b01      	subs	r3, #1
 800474c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800474e:	4b04      	ldr	r3, [pc, #16]	; (8004760 <vPortSetupTimerInterrupt+0x34>)
 8004750:	2207      	movs	r2, #7
 8004752:	601a      	str	r2, [r3, #0]
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	e000e010 	.word	0xe000e010
 8004764:	e000e018 	.word	0xe000e018
 8004768:	20000008 	.word	0x20000008
 800476c:	10624dd3 	.word	0x10624dd3
 8004770:	e000e014 	.word	0xe000e014

08004774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004784 <vPortEnableVFP+0x10>
 8004778:	6801      	ldr	r1, [r0, #0]
 800477a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800477e:	6001      	str	r1, [r0, #0]
 8004780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004782:	bf00      	nop
 8004784:	e000ed88 	.word	0xe000ed88

08004788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004794:	f7fe fff2 	bl	800377c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004798:	4b5b      	ldr	r3, [pc, #364]	; (8004908 <pvPortMalloc+0x180>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047a0:	f000 f920 	bl	80049e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047a4:	4b59      	ldr	r3, [pc, #356]	; (800490c <pvPortMalloc+0x184>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f040 8093 	bne.w	80048d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01d      	beq.n	80047f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80047b8:	2208      	movs	r2, #8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d014      	beq.n	80047f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f023 0307 	bic.w	r3, r3, #7
 80047d0:	3308      	adds	r3, #8
 80047d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <pvPortMalloc+0x6c>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	617b      	str	r3, [r7, #20]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d06e      	beq.n	80048d8 <pvPortMalloc+0x150>
 80047fa:	4b45      	ldr	r3, [pc, #276]	; (8004910 <pvPortMalloc+0x188>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	429a      	cmp	r2, r3
 8004802:	d869      	bhi.n	80048d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004804:	4b43      	ldr	r3, [pc, #268]	; (8004914 <pvPortMalloc+0x18c>)
 8004806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004808:	4b42      	ldr	r3, [pc, #264]	; (8004914 <pvPortMalloc+0x18c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800480e:	e004      	b.n	800481a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d903      	bls.n	800482c <pvPortMalloc+0xa4>
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f1      	bne.n	8004810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800482c:	4b36      	ldr	r3, [pc, #216]	; (8004908 <pvPortMalloc+0x180>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004832:	429a      	cmp	r2, r3
 8004834:	d050      	beq.n	80048d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2208      	movs	r2, #8
 800483c:	4413      	add	r3, r2
 800483e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	1ad2      	subs	r2, r2, r3
 8004850:	2308      	movs	r3, #8
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	429a      	cmp	r2, r3
 8004856:	d91f      	bls.n	8004898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <pvPortMalloc+0xf8>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	613b      	str	r3, [r7, #16]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	1ad2      	subs	r2, r2, r3
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004892:	69b8      	ldr	r0, [r7, #24]
 8004894:	f000 f908 	bl	8004aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004898:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <pvPortMalloc+0x188>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <pvPortMalloc+0x188>)
 80048a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048a6:	4b1a      	ldr	r3, [pc, #104]	; (8004910 <pvPortMalloc+0x188>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <pvPortMalloc+0x190>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d203      	bcs.n	80048ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048b2:	4b17      	ldr	r3, [pc, #92]	; (8004910 <pvPortMalloc+0x188>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a18      	ldr	r2, [pc, #96]	; (8004918 <pvPortMalloc+0x190>)
 80048b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	4b13      	ldr	r3, [pc, #76]	; (800490c <pvPortMalloc+0x184>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80048ce:	4b13      	ldr	r3, [pc, #76]	; (800491c <pvPortMalloc+0x194>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	4a11      	ldr	r2, [pc, #68]	; (800491c <pvPortMalloc+0x194>)
 80048d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048d8:	f7fe ff5e 	bl	8003798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <pvPortMalloc+0x174>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	60fb      	str	r3, [r7, #12]
}
 80048f8:	bf00      	nop
 80048fa:	e7fe      	b.n	80048fa <pvPortMalloc+0x172>
	return pvReturn;
 80048fc:	69fb      	ldr	r3, [r7, #28]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3728      	adds	r7, #40	; 0x28
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200040e4 	.word	0x200040e4
 800490c:	200040f8 	.word	0x200040f8
 8004910:	200040e8 	.word	0x200040e8
 8004914:	200040dc 	.word	0x200040dc
 8004918:	200040ec 	.word	0x200040ec
 800491c:	200040f0 	.word	0x200040f0

08004920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d04d      	beq.n	80049ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004932:	2308      	movs	r3, #8
 8004934:	425b      	negs	r3, r3
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4413      	add	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <vPortFree+0xb8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4013      	ands	r3, r2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <vPortFree+0x44>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	60fb      	str	r3, [r7, #12]
}
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <vPortFree+0x62>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	60bb      	str	r3, [r7, #8]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <vPortFree+0xb8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01e      	beq.n	80049ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d11a      	bne.n	80049ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <vPortFree+0xb8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	401a      	ands	r2, r3
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049a8:	f7fe fee8 	bl	800377c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <vPortFree+0xbc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4413      	add	r3, r2
 80049b6:	4a09      	ldr	r2, [pc, #36]	; (80049dc <vPortFree+0xbc>)
 80049b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049ba:	6938      	ldr	r0, [r7, #16]
 80049bc:	f000 f874 	bl	8004aa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <vPortFree+0xc0>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	4a06      	ldr	r2, [pc, #24]	; (80049e0 <vPortFree+0xc0>)
 80049c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80049ca:	f7fe fee5 	bl	8003798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049ce:	bf00      	nop
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200040f8 	.word	0x200040f8
 80049dc:	200040e8 	.word	0x200040e8
 80049e0:	200040f4 	.word	0x200040f4

080049e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80049ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049f0:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <prvHeapInit+0xac>)
 80049f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3307      	adds	r3, #7
 8004a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0307 	bic.w	r3, r3, #7
 8004a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	4a1f      	ldr	r2, [pc, #124]	; (8004a90 <prvHeapInit+0xac>)
 8004a14:	4413      	add	r3, r2
 8004a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a1c:	4a1d      	ldr	r2, [pc, #116]	; (8004a94 <prvHeapInit+0xb0>)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <prvHeapInit+0xb0>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a30:	2208      	movs	r2, #8
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0307 	bic.w	r3, r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <prvHeapInit+0xb4>)
 8004a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a46:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <prvHeapInit+0xb4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a4e:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <prvHeapInit+0xb4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	1ad2      	subs	r2, r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a64:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <prvHeapInit+0xb4>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <prvHeapInit+0xb8>)
 8004a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <prvHeapInit+0xbc>)
 8004a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <prvHeapInit+0xc0>)
 8004a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a82:	601a      	str	r2, [r3, #0]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	200004dc 	.word	0x200004dc
 8004a94:	200040dc 	.word	0x200040dc
 8004a98:	200040e4 	.word	0x200040e4
 8004a9c:	200040ec 	.word	0x200040ec
 8004aa0:	200040e8 	.word	0x200040e8
 8004aa4:	200040f8 	.word	0x200040f8

08004aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ab0:	4b28      	ldr	r3, [pc, #160]	; (8004b54 <prvInsertBlockIntoFreeList+0xac>)
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e002      	b.n	8004abc <prvInsertBlockIntoFreeList+0x14>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d8f7      	bhi.n	8004ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d108      	bne.n	8004aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	441a      	add	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d118      	bne.n	8004b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <prvInsertBlockIntoFreeList+0xb0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d00d      	beq.n	8004b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	441a      	add	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e008      	b.n	8004b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b26:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <prvInsertBlockIntoFreeList+0xb0>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e003      	b.n	8004b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d002      	beq.n	8004b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	200040dc 	.word	0x200040dc
 8004b58:	200040e4 	.word	0x200040e4

08004b5c <__errno>:
 8004b5c:	4b01      	ldr	r3, [pc, #4]	; (8004b64 <__errno+0x8>)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000064 	.word	0x20000064

08004b68 <__libc_init_array>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	4d0d      	ldr	r5, [pc, #52]	; (8004ba0 <__libc_init_array+0x38>)
 8004b6c:	4c0d      	ldr	r4, [pc, #52]	; (8004ba4 <__libc_init_array+0x3c>)
 8004b6e:	1b64      	subs	r4, r4, r5
 8004b70:	10a4      	asrs	r4, r4, #2
 8004b72:	2600      	movs	r6, #0
 8004b74:	42a6      	cmp	r6, r4
 8004b76:	d109      	bne.n	8004b8c <__libc_init_array+0x24>
 8004b78:	4d0b      	ldr	r5, [pc, #44]	; (8004ba8 <__libc_init_array+0x40>)
 8004b7a:	4c0c      	ldr	r4, [pc, #48]	; (8004bac <__libc_init_array+0x44>)
 8004b7c:	f000 fc8e 	bl	800549c <_init>
 8004b80:	1b64      	subs	r4, r4, r5
 8004b82:	10a4      	asrs	r4, r4, #2
 8004b84:	2600      	movs	r6, #0
 8004b86:	42a6      	cmp	r6, r4
 8004b88:	d105      	bne.n	8004b96 <__libc_init_array+0x2e>
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b90:	4798      	blx	r3
 8004b92:	3601      	adds	r6, #1
 8004b94:	e7ee      	b.n	8004b74 <__libc_init_array+0xc>
 8004b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9a:	4798      	blx	r3
 8004b9c:	3601      	adds	r6, #1
 8004b9e:	e7f2      	b.n	8004b86 <__libc_init_array+0x1e>
 8004ba0:	080058ac 	.word	0x080058ac
 8004ba4:	080058ac 	.word	0x080058ac
 8004ba8:	080058ac 	.word	0x080058ac
 8004bac:	080058b0 	.word	0x080058b0

08004bb0 <memcpy>:
 8004bb0:	440a      	add	r2, r1
 8004bb2:	4291      	cmp	r1, r2
 8004bb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004bb8:	d100      	bne.n	8004bbc <memcpy+0xc>
 8004bba:	4770      	bx	lr
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bc6:	4291      	cmp	r1, r2
 8004bc8:	d1f9      	bne.n	8004bbe <memcpy+0xe>
 8004bca:	bd10      	pop	{r4, pc}

08004bcc <memset>:
 8004bcc:	4402      	add	r2, r0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d100      	bne.n	8004bd6 <memset+0xa>
 8004bd4:	4770      	bx	lr
 8004bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bda:	e7f9      	b.n	8004bd0 <memset+0x4>

08004bdc <siprintf>:
 8004bdc:	b40e      	push	{r1, r2, r3}
 8004bde:	b500      	push	{lr}
 8004be0:	b09c      	sub	sp, #112	; 0x70
 8004be2:	ab1d      	add	r3, sp, #116	; 0x74
 8004be4:	9002      	str	r0, [sp, #8]
 8004be6:	9006      	str	r0, [sp, #24]
 8004be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bec:	4809      	ldr	r0, [pc, #36]	; (8004c14 <siprintf+0x38>)
 8004bee:	9107      	str	r1, [sp, #28]
 8004bf0:	9104      	str	r1, [sp, #16]
 8004bf2:	4909      	ldr	r1, [pc, #36]	; (8004c18 <siprintf+0x3c>)
 8004bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf8:	9105      	str	r1, [sp, #20]
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	a902      	add	r1, sp, #8
 8004c00:	f000 f868 	bl	8004cd4 <_svfiprintf_r>
 8004c04:	9b02      	ldr	r3, [sp, #8]
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	b01c      	add	sp, #112	; 0x70
 8004c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c10:	b003      	add	sp, #12
 8004c12:	4770      	bx	lr
 8004c14:	20000064 	.word	0x20000064
 8004c18:	ffff0208 	.word	0xffff0208

08004c1c <__ssputs_r>:
 8004c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c20:	688e      	ldr	r6, [r1, #8]
 8004c22:	429e      	cmp	r6, r3
 8004c24:	4682      	mov	sl, r0
 8004c26:	460c      	mov	r4, r1
 8004c28:	4690      	mov	r8, r2
 8004c2a:	461f      	mov	r7, r3
 8004c2c:	d838      	bhi.n	8004ca0 <__ssputs_r+0x84>
 8004c2e:	898a      	ldrh	r2, [r1, #12]
 8004c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c34:	d032      	beq.n	8004c9c <__ssputs_r+0x80>
 8004c36:	6825      	ldr	r5, [r4, #0]
 8004c38:	6909      	ldr	r1, [r1, #16]
 8004c3a:	eba5 0901 	sub.w	r9, r5, r1
 8004c3e:	6965      	ldr	r5, [r4, #20]
 8004c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c48:	3301      	adds	r3, #1
 8004c4a:	444b      	add	r3, r9
 8004c4c:	106d      	asrs	r5, r5, #1
 8004c4e:	429d      	cmp	r5, r3
 8004c50:	bf38      	it	cc
 8004c52:	461d      	movcc	r5, r3
 8004c54:	0553      	lsls	r3, r2, #21
 8004c56:	d531      	bpl.n	8004cbc <__ssputs_r+0xa0>
 8004c58:	4629      	mov	r1, r5
 8004c5a:	f000 fb55 	bl	8005308 <_malloc_r>
 8004c5e:	4606      	mov	r6, r0
 8004c60:	b950      	cbnz	r0, 8004c78 <__ssputs_r+0x5c>
 8004c62:	230c      	movs	r3, #12
 8004c64:	f8ca 3000 	str.w	r3, [sl]
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c78:	6921      	ldr	r1, [r4, #16]
 8004c7a:	464a      	mov	r2, r9
 8004c7c:	f7ff ff98 	bl	8004bb0 <memcpy>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	6126      	str	r6, [r4, #16]
 8004c8e:	6165      	str	r5, [r4, #20]
 8004c90:	444e      	add	r6, r9
 8004c92:	eba5 0509 	sub.w	r5, r5, r9
 8004c96:	6026      	str	r6, [r4, #0]
 8004c98:	60a5      	str	r5, [r4, #8]
 8004c9a:	463e      	mov	r6, r7
 8004c9c:	42be      	cmp	r6, r7
 8004c9e:	d900      	bls.n	8004ca2 <__ssputs_r+0x86>
 8004ca0:	463e      	mov	r6, r7
 8004ca2:	6820      	ldr	r0, [r4, #0]
 8004ca4:	4632      	mov	r2, r6
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	f000 faa8 	bl	80051fc <memmove>
 8004cac:	68a3      	ldr	r3, [r4, #8]
 8004cae:	1b9b      	subs	r3, r3, r6
 8004cb0:	60a3      	str	r3, [r4, #8]
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	4433      	add	r3, r6
 8004cb6:	6023      	str	r3, [r4, #0]
 8004cb8:	2000      	movs	r0, #0
 8004cba:	e7db      	b.n	8004c74 <__ssputs_r+0x58>
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	f000 fb97 	bl	80053f0 <_realloc_r>
 8004cc2:	4606      	mov	r6, r0
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d1e1      	bne.n	8004c8c <__ssputs_r+0x70>
 8004cc8:	6921      	ldr	r1, [r4, #16]
 8004cca:	4650      	mov	r0, sl
 8004ccc:	f000 fab0 	bl	8005230 <_free_r>
 8004cd0:	e7c7      	b.n	8004c62 <__ssputs_r+0x46>
	...

08004cd4 <_svfiprintf_r>:
 8004cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd8:	4698      	mov	r8, r3
 8004cda:	898b      	ldrh	r3, [r1, #12]
 8004cdc:	061b      	lsls	r3, r3, #24
 8004cde:	b09d      	sub	sp, #116	; 0x74
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	460d      	mov	r5, r1
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	d50e      	bpl.n	8004d06 <_svfiprintf_r+0x32>
 8004ce8:	690b      	ldr	r3, [r1, #16]
 8004cea:	b963      	cbnz	r3, 8004d06 <_svfiprintf_r+0x32>
 8004cec:	2140      	movs	r1, #64	; 0x40
 8004cee:	f000 fb0b 	bl	8005308 <_malloc_r>
 8004cf2:	6028      	str	r0, [r5, #0]
 8004cf4:	6128      	str	r0, [r5, #16]
 8004cf6:	b920      	cbnz	r0, 8004d02 <_svfiprintf_r+0x2e>
 8004cf8:	230c      	movs	r3, #12
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d00:	e0d1      	b.n	8004ea6 <_svfiprintf_r+0x1d2>
 8004d02:	2340      	movs	r3, #64	; 0x40
 8004d04:	616b      	str	r3, [r5, #20]
 8004d06:	2300      	movs	r3, #0
 8004d08:	9309      	str	r3, [sp, #36]	; 0x24
 8004d0a:	2320      	movs	r3, #32
 8004d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d14:	2330      	movs	r3, #48	; 0x30
 8004d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ec0 <_svfiprintf_r+0x1ec>
 8004d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d1e:	f04f 0901 	mov.w	r9, #1
 8004d22:	4623      	mov	r3, r4
 8004d24:	469a      	mov	sl, r3
 8004d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d2a:	b10a      	cbz	r2, 8004d30 <_svfiprintf_r+0x5c>
 8004d2c:	2a25      	cmp	r2, #37	; 0x25
 8004d2e:	d1f9      	bne.n	8004d24 <_svfiprintf_r+0x50>
 8004d30:	ebba 0b04 	subs.w	fp, sl, r4
 8004d34:	d00b      	beq.n	8004d4e <_svfiprintf_r+0x7a>
 8004d36:	465b      	mov	r3, fp
 8004d38:	4622      	mov	r2, r4
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	f7ff ff6d 	bl	8004c1c <__ssputs_r>
 8004d42:	3001      	adds	r0, #1
 8004d44:	f000 80aa 	beq.w	8004e9c <_svfiprintf_r+0x1c8>
 8004d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d4a:	445a      	add	r2, fp
 8004d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 80a2 	beq.w	8004e9c <_svfiprintf_r+0x1c8>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d62:	f10a 0a01 	add.w	sl, sl, #1
 8004d66:	9304      	str	r3, [sp, #16]
 8004d68:	9307      	str	r3, [sp, #28]
 8004d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d70:	4654      	mov	r4, sl
 8004d72:	2205      	movs	r2, #5
 8004d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d78:	4851      	ldr	r0, [pc, #324]	; (8004ec0 <_svfiprintf_r+0x1ec>)
 8004d7a:	f7fb fa41 	bl	8000200 <memchr>
 8004d7e:	9a04      	ldr	r2, [sp, #16]
 8004d80:	b9d8      	cbnz	r0, 8004dba <_svfiprintf_r+0xe6>
 8004d82:	06d0      	lsls	r0, r2, #27
 8004d84:	bf44      	itt	mi
 8004d86:	2320      	movmi	r3, #32
 8004d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d8c:	0711      	lsls	r1, r2, #28
 8004d8e:	bf44      	itt	mi
 8004d90:	232b      	movmi	r3, #43	; 0x2b
 8004d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d96:	f89a 3000 	ldrb.w	r3, [sl]
 8004d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d9c:	d015      	beq.n	8004dca <_svfiprintf_r+0xf6>
 8004d9e:	9a07      	ldr	r2, [sp, #28]
 8004da0:	4654      	mov	r4, sl
 8004da2:	2000      	movs	r0, #0
 8004da4:	f04f 0c0a 	mov.w	ip, #10
 8004da8:	4621      	mov	r1, r4
 8004daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dae:	3b30      	subs	r3, #48	; 0x30
 8004db0:	2b09      	cmp	r3, #9
 8004db2:	d94e      	bls.n	8004e52 <_svfiprintf_r+0x17e>
 8004db4:	b1b0      	cbz	r0, 8004de4 <_svfiprintf_r+0x110>
 8004db6:	9207      	str	r2, [sp, #28]
 8004db8:	e014      	b.n	8004de4 <_svfiprintf_r+0x110>
 8004dba:	eba0 0308 	sub.w	r3, r0, r8
 8004dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	9304      	str	r3, [sp, #16]
 8004dc6:	46a2      	mov	sl, r4
 8004dc8:	e7d2      	b.n	8004d70 <_svfiprintf_r+0x9c>
 8004dca:	9b03      	ldr	r3, [sp, #12]
 8004dcc:	1d19      	adds	r1, r3, #4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	9103      	str	r1, [sp, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bfbb      	ittet	lt
 8004dd6:	425b      	neglt	r3, r3
 8004dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8004ddc:	9307      	strge	r3, [sp, #28]
 8004dde:	9307      	strlt	r3, [sp, #28]
 8004de0:	bfb8      	it	lt
 8004de2:	9204      	strlt	r2, [sp, #16]
 8004de4:	7823      	ldrb	r3, [r4, #0]
 8004de6:	2b2e      	cmp	r3, #46	; 0x2e
 8004de8:	d10c      	bne.n	8004e04 <_svfiprintf_r+0x130>
 8004dea:	7863      	ldrb	r3, [r4, #1]
 8004dec:	2b2a      	cmp	r3, #42	; 0x2a
 8004dee:	d135      	bne.n	8004e5c <_svfiprintf_r+0x188>
 8004df0:	9b03      	ldr	r3, [sp, #12]
 8004df2:	1d1a      	adds	r2, r3, #4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	9203      	str	r2, [sp, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bfb8      	it	lt
 8004dfc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e00:	3402      	adds	r4, #2
 8004e02:	9305      	str	r3, [sp, #20]
 8004e04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ed0 <_svfiprintf_r+0x1fc>
 8004e08:	7821      	ldrb	r1, [r4, #0]
 8004e0a:	2203      	movs	r2, #3
 8004e0c:	4650      	mov	r0, sl
 8004e0e:	f7fb f9f7 	bl	8000200 <memchr>
 8004e12:	b140      	cbz	r0, 8004e26 <_svfiprintf_r+0x152>
 8004e14:	2340      	movs	r3, #64	; 0x40
 8004e16:	eba0 000a 	sub.w	r0, r0, sl
 8004e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8004e1e:	9b04      	ldr	r3, [sp, #16]
 8004e20:	4303      	orrs	r3, r0
 8004e22:	3401      	adds	r4, #1
 8004e24:	9304      	str	r3, [sp, #16]
 8004e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e2a:	4826      	ldr	r0, [pc, #152]	; (8004ec4 <_svfiprintf_r+0x1f0>)
 8004e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e30:	2206      	movs	r2, #6
 8004e32:	f7fb f9e5 	bl	8000200 <memchr>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d038      	beq.n	8004eac <_svfiprintf_r+0x1d8>
 8004e3a:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <_svfiprintf_r+0x1f4>)
 8004e3c:	bb1b      	cbnz	r3, 8004e86 <_svfiprintf_r+0x1b2>
 8004e3e:	9b03      	ldr	r3, [sp, #12]
 8004e40:	3307      	adds	r3, #7
 8004e42:	f023 0307 	bic.w	r3, r3, #7
 8004e46:	3308      	adds	r3, #8
 8004e48:	9303      	str	r3, [sp, #12]
 8004e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4c:	4433      	add	r3, r6
 8004e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e50:	e767      	b.n	8004d22 <_svfiprintf_r+0x4e>
 8004e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e56:	460c      	mov	r4, r1
 8004e58:	2001      	movs	r0, #1
 8004e5a:	e7a5      	b.n	8004da8 <_svfiprintf_r+0xd4>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	3401      	adds	r4, #1
 8004e60:	9305      	str	r3, [sp, #20]
 8004e62:	4619      	mov	r1, r3
 8004e64:	f04f 0c0a 	mov.w	ip, #10
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e6e:	3a30      	subs	r2, #48	; 0x30
 8004e70:	2a09      	cmp	r2, #9
 8004e72:	d903      	bls.n	8004e7c <_svfiprintf_r+0x1a8>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0c5      	beq.n	8004e04 <_svfiprintf_r+0x130>
 8004e78:	9105      	str	r1, [sp, #20]
 8004e7a:	e7c3      	b.n	8004e04 <_svfiprintf_r+0x130>
 8004e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e80:	4604      	mov	r4, r0
 8004e82:	2301      	movs	r3, #1
 8004e84:	e7f0      	b.n	8004e68 <_svfiprintf_r+0x194>
 8004e86:	ab03      	add	r3, sp, #12
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	462a      	mov	r2, r5
 8004e8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <_svfiprintf_r+0x1f8>)
 8004e8e:	a904      	add	r1, sp, #16
 8004e90:	4638      	mov	r0, r7
 8004e92:	f3af 8000 	nop.w
 8004e96:	1c42      	adds	r2, r0, #1
 8004e98:	4606      	mov	r6, r0
 8004e9a:	d1d6      	bne.n	8004e4a <_svfiprintf_r+0x176>
 8004e9c:	89ab      	ldrh	r3, [r5, #12]
 8004e9e:	065b      	lsls	r3, r3, #25
 8004ea0:	f53f af2c 	bmi.w	8004cfc <_svfiprintf_r+0x28>
 8004ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ea6:	b01d      	add	sp, #116	; 0x74
 8004ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eac:	ab03      	add	r3, sp, #12
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <_svfiprintf_r+0x1f8>)
 8004eb4:	a904      	add	r1, sp, #16
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f000 f87a 	bl	8004fb0 <_printf_i>
 8004ebc:	e7eb      	b.n	8004e96 <_svfiprintf_r+0x1c2>
 8004ebe:	bf00      	nop
 8004ec0:	08005870 	.word	0x08005870
 8004ec4:	0800587a 	.word	0x0800587a
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	08004c1d 	.word	0x08004c1d
 8004ed0:	08005876 	.word	0x08005876

08004ed4 <_printf_common>:
 8004ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed8:	4616      	mov	r6, r2
 8004eda:	4699      	mov	r9, r3
 8004edc:	688a      	ldr	r2, [r1, #8]
 8004ede:	690b      	ldr	r3, [r1, #16]
 8004ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	bfb8      	it	lt
 8004ee8:	4613      	movlt	r3, r2
 8004eea:	6033      	str	r3, [r6, #0]
 8004eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	b10a      	cbz	r2, 8004efa <_printf_common+0x26>
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	6033      	str	r3, [r6, #0]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	0699      	lsls	r1, r3, #26
 8004efe:	bf42      	ittt	mi
 8004f00:	6833      	ldrmi	r3, [r6, #0]
 8004f02:	3302      	addmi	r3, #2
 8004f04:	6033      	strmi	r3, [r6, #0]
 8004f06:	6825      	ldr	r5, [r4, #0]
 8004f08:	f015 0506 	ands.w	r5, r5, #6
 8004f0c:	d106      	bne.n	8004f1c <_printf_common+0x48>
 8004f0e:	f104 0a19 	add.w	sl, r4, #25
 8004f12:	68e3      	ldr	r3, [r4, #12]
 8004f14:	6832      	ldr	r2, [r6, #0]
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	42ab      	cmp	r3, r5
 8004f1a:	dc26      	bgt.n	8004f6a <_printf_common+0x96>
 8004f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f20:	1e13      	subs	r3, r2, #0
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	bf18      	it	ne
 8004f26:	2301      	movne	r3, #1
 8004f28:	0692      	lsls	r2, r2, #26
 8004f2a:	d42b      	bmi.n	8004f84 <_printf_common+0xb0>
 8004f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f30:	4649      	mov	r1, r9
 8004f32:	4638      	mov	r0, r7
 8004f34:	47c0      	blx	r8
 8004f36:	3001      	adds	r0, #1
 8004f38:	d01e      	beq.n	8004f78 <_printf_common+0xa4>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	68e5      	ldr	r5, [r4, #12]
 8004f3e:	6832      	ldr	r2, [r6, #0]
 8004f40:	f003 0306 	and.w	r3, r3, #6
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	bf08      	it	eq
 8004f48:	1aad      	subeq	r5, r5, r2
 8004f4a:	68a3      	ldr	r3, [r4, #8]
 8004f4c:	6922      	ldr	r2, [r4, #16]
 8004f4e:	bf0c      	ite	eq
 8004f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f54:	2500      	movne	r5, #0
 8004f56:	4293      	cmp	r3, r2
 8004f58:	bfc4      	itt	gt
 8004f5a:	1a9b      	subgt	r3, r3, r2
 8004f5c:	18ed      	addgt	r5, r5, r3
 8004f5e:	2600      	movs	r6, #0
 8004f60:	341a      	adds	r4, #26
 8004f62:	42b5      	cmp	r5, r6
 8004f64:	d11a      	bne.n	8004f9c <_printf_common+0xc8>
 8004f66:	2000      	movs	r0, #0
 8004f68:	e008      	b.n	8004f7c <_printf_common+0xa8>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4652      	mov	r2, sl
 8004f6e:	4649      	mov	r1, r9
 8004f70:	4638      	mov	r0, r7
 8004f72:	47c0      	blx	r8
 8004f74:	3001      	adds	r0, #1
 8004f76:	d103      	bne.n	8004f80 <_printf_common+0xac>
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f80:	3501      	adds	r5, #1
 8004f82:	e7c6      	b.n	8004f12 <_printf_common+0x3e>
 8004f84:	18e1      	adds	r1, r4, r3
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	2030      	movs	r0, #48	; 0x30
 8004f8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f8e:	4422      	add	r2, r4
 8004f90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f98:	3302      	adds	r3, #2
 8004f9a:	e7c7      	b.n	8004f2c <_printf_common+0x58>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	47c0      	blx	r8
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d0e6      	beq.n	8004f78 <_printf_common+0xa4>
 8004faa:	3601      	adds	r6, #1
 8004fac:	e7d9      	b.n	8004f62 <_printf_common+0x8e>
	...

08004fb0 <_printf_i>:
 8004fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb4:	7e0f      	ldrb	r7, [r1, #24]
 8004fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fb8:	2f78      	cmp	r7, #120	; 0x78
 8004fba:	4691      	mov	r9, r2
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	469a      	mov	sl, r3
 8004fc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fc6:	d807      	bhi.n	8004fd8 <_printf_i+0x28>
 8004fc8:	2f62      	cmp	r7, #98	; 0x62
 8004fca:	d80a      	bhi.n	8004fe2 <_printf_i+0x32>
 8004fcc:	2f00      	cmp	r7, #0
 8004fce:	f000 80d8 	beq.w	8005182 <_printf_i+0x1d2>
 8004fd2:	2f58      	cmp	r7, #88	; 0x58
 8004fd4:	f000 80a3 	beq.w	800511e <_printf_i+0x16e>
 8004fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fe0:	e03a      	b.n	8005058 <_printf_i+0xa8>
 8004fe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fe6:	2b15      	cmp	r3, #21
 8004fe8:	d8f6      	bhi.n	8004fd8 <_printf_i+0x28>
 8004fea:	a101      	add	r1, pc, #4	; (adr r1, 8004ff0 <_printf_i+0x40>)
 8004fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff0:	08005049 	.word	0x08005049
 8004ff4:	0800505d 	.word	0x0800505d
 8004ff8:	08004fd9 	.word	0x08004fd9
 8004ffc:	08004fd9 	.word	0x08004fd9
 8005000:	08004fd9 	.word	0x08004fd9
 8005004:	08004fd9 	.word	0x08004fd9
 8005008:	0800505d 	.word	0x0800505d
 800500c:	08004fd9 	.word	0x08004fd9
 8005010:	08004fd9 	.word	0x08004fd9
 8005014:	08004fd9 	.word	0x08004fd9
 8005018:	08004fd9 	.word	0x08004fd9
 800501c:	08005169 	.word	0x08005169
 8005020:	0800508d 	.word	0x0800508d
 8005024:	0800514b 	.word	0x0800514b
 8005028:	08004fd9 	.word	0x08004fd9
 800502c:	08004fd9 	.word	0x08004fd9
 8005030:	0800518b 	.word	0x0800518b
 8005034:	08004fd9 	.word	0x08004fd9
 8005038:	0800508d 	.word	0x0800508d
 800503c:	08004fd9 	.word	0x08004fd9
 8005040:	08004fd9 	.word	0x08004fd9
 8005044:	08005153 	.word	0x08005153
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	1d1a      	adds	r2, r3, #4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	602a      	str	r2, [r5, #0]
 8005050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005058:	2301      	movs	r3, #1
 800505a:	e0a3      	b.n	80051a4 <_printf_i+0x1f4>
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	6829      	ldr	r1, [r5, #0]
 8005060:	0606      	lsls	r6, r0, #24
 8005062:	f101 0304 	add.w	r3, r1, #4
 8005066:	d50a      	bpl.n	800507e <_printf_i+0xce>
 8005068:	680e      	ldr	r6, [r1, #0]
 800506a:	602b      	str	r3, [r5, #0]
 800506c:	2e00      	cmp	r6, #0
 800506e:	da03      	bge.n	8005078 <_printf_i+0xc8>
 8005070:	232d      	movs	r3, #45	; 0x2d
 8005072:	4276      	negs	r6, r6
 8005074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005078:	485e      	ldr	r0, [pc, #376]	; (80051f4 <_printf_i+0x244>)
 800507a:	230a      	movs	r3, #10
 800507c:	e019      	b.n	80050b2 <_printf_i+0x102>
 800507e:	680e      	ldr	r6, [r1, #0]
 8005080:	602b      	str	r3, [r5, #0]
 8005082:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005086:	bf18      	it	ne
 8005088:	b236      	sxthne	r6, r6
 800508a:	e7ef      	b.n	800506c <_printf_i+0xbc>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	6820      	ldr	r0, [r4, #0]
 8005090:	1d19      	adds	r1, r3, #4
 8005092:	6029      	str	r1, [r5, #0]
 8005094:	0601      	lsls	r1, r0, #24
 8005096:	d501      	bpl.n	800509c <_printf_i+0xec>
 8005098:	681e      	ldr	r6, [r3, #0]
 800509a:	e002      	b.n	80050a2 <_printf_i+0xf2>
 800509c:	0646      	lsls	r6, r0, #25
 800509e:	d5fb      	bpl.n	8005098 <_printf_i+0xe8>
 80050a0:	881e      	ldrh	r6, [r3, #0]
 80050a2:	4854      	ldr	r0, [pc, #336]	; (80051f4 <_printf_i+0x244>)
 80050a4:	2f6f      	cmp	r7, #111	; 0x6f
 80050a6:	bf0c      	ite	eq
 80050a8:	2308      	moveq	r3, #8
 80050aa:	230a      	movne	r3, #10
 80050ac:	2100      	movs	r1, #0
 80050ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050b2:	6865      	ldr	r5, [r4, #4]
 80050b4:	60a5      	str	r5, [r4, #8]
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	bfa2      	ittt	ge
 80050ba:	6821      	ldrge	r1, [r4, #0]
 80050bc:	f021 0104 	bicge.w	r1, r1, #4
 80050c0:	6021      	strge	r1, [r4, #0]
 80050c2:	b90e      	cbnz	r6, 80050c8 <_printf_i+0x118>
 80050c4:	2d00      	cmp	r5, #0
 80050c6:	d04d      	beq.n	8005164 <_printf_i+0x1b4>
 80050c8:	4615      	mov	r5, r2
 80050ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ce:	fb03 6711 	mls	r7, r3, r1, r6
 80050d2:	5dc7      	ldrb	r7, [r0, r7]
 80050d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050d8:	4637      	mov	r7, r6
 80050da:	42bb      	cmp	r3, r7
 80050dc:	460e      	mov	r6, r1
 80050de:	d9f4      	bls.n	80050ca <_printf_i+0x11a>
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d10b      	bne.n	80050fc <_printf_i+0x14c>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	07de      	lsls	r6, r3, #31
 80050e8:	d508      	bpl.n	80050fc <_printf_i+0x14c>
 80050ea:	6923      	ldr	r3, [r4, #16]
 80050ec:	6861      	ldr	r1, [r4, #4]
 80050ee:	4299      	cmp	r1, r3
 80050f0:	bfde      	ittt	le
 80050f2:	2330      	movle	r3, #48	; 0x30
 80050f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050fc:	1b52      	subs	r2, r2, r5
 80050fe:	6122      	str	r2, [r4, #16]
 8005100:	f8cd a000 	str.w	sl, [sp]
 8005104:	464b      	mov	r3, r9
 8005106:	aa03      	add	r2, sp, #12
 8005108:	4621      	mov	r1, r4
 800510a:	4640      	mov	r0, r8
 800510c:	f7ff fee2 	bl	8004ed4 <_printf_common>
 8005110:	3001      	adds	r0, #1
 8005112:	d14c      	bne.n	80051ae <_printf_i+0x1fe>
 8005114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005118:	b004      	add	sp, #16
 800511a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511e:	4835      	ldr	r0, [pc, #212]	; (80051f4 <_printf_i+0x244>)
 8005120:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005124:	6829      	ldr	r1, [r5, #0]
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	f851 6b04 	ldr.w	r6, [r1], #4
 800512c:	6029      	str	r1, [r5, #0]
 800512e:	061d      	lsls	r5, r3, #24
 8005130:	d514      	bpl.n	800515c <_printf_i+0x1ac>
 8005132:	07df      	lsls	r7, r3, #31
 8005134:	bf44      	itt	mi
 8005136:	f043 0320 	orrmi.w	r3, r3, #32
 800513a:	6023      	strmi	r3, [r4, #0]
 800513c:	b91e      	cbnz	r6, 8005146 <_printf_i+0x196>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	f023 0320 	bic.w	r3, r3, #32
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	2310      	movs	r3, #16
 8005148:	e7b0      	b.n	80050ac <_printf_i+0xfc>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	f043 0320 	orr.w	r3, r3, #32
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	2378      	movs	r3, #120	; 0x78
 8005154:	4828      	ldr	r0, [pc, #160]	; (80051f8 <_printf_i+0x248>)
 8005156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800515a:	e7e3      	b.n	8005124 <_printf_i+0x174>
 800515c:	0659      	lsls	r1, r3, #25
 800515e:	bf48      	it	mi
 8005160:	b2b6      	uxthmi	r6, r6
 8005162:	e7e6      	b.n	8005132 <_printf_i+0x182>
 8005164:	4615      	mov	r5, r2
 8005166:	e7bb      	b.n	80050e0 <_printf_i+0x130>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	6826      	ldr	r6, [r4, #0]
 800516c:	6961      	ldr	r1, [r4, #20]
 800516e:	1d18      	adds	r0, r3, #4
 8005170:	6028      	str	r0, [r5, #0]
 8005172:	0635      	lsls	r5, r6, #24
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	d501      	bpl.n	800517c <_printf_i+0x1cc>
 8005178:	6019      	str	r1, [r3, #0]
 800517a:	e002      	b.n	8005182 <_printf_i+0x1d2>
 800517c:	0670      	lsls	r0, r6, #25
 800517e:	d5fb      	bpl.n	8005178 <_printf_i+0x1c8>
 8005180:	8019      	strh	r1, [r3, #0]
 8005182:	2300      	movs	r3, #0
 8005184:	6123      	str	r3, [r4, #16]
 8005186:	4615      	mov	r5, r2
 8005188:	e7ba      	b.n	8005100 <_printf_i+0x150>
 800518a:	682b      	ldr	r3, [r5, #0]
 800518c:	1d1a      	adds	r2, r3, #4
 800518e:	602a      	str	r2, [r5, #0]
 8005190:	681d      	ldr	r5, [r3, #0]
 8005192:	6862      	ldr	r2, [r4, #4]
 8005194:	2100      	movs	r1, #0
 8005196:	4628      	mov	r0, r5
 8005198:	f7fb f832 	bl	8000200 <memchr>
 800519c:	b108      	cbz	r0, 80051a2 <_printf_i+0x1f2>
 800519e:	1b40      	subs	r0, r0, r5
 80051a0:	6060      	str	r0, [r4, #4]
 80051a2:	6863      	ldr	r3, [r4, #4]
 80051a4:	6123      	str	r3, [r4, #16]
 80051a6:	2300      	movs	r3, #0
 80051a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ac:	e7a8      	b.n	8005100 <_printf_i+0x150>
 80051ae:	6923      	ldr	r3, [r4, #16]
 80051b0:	462a      	mov	r2, r5
 80051b2:	4649      	mov	r1, r9
 80051b4:	4640      	mov	r0, r8
 80051b6:	47d0      	blx	sl
 80051b8:	3001      	adds	r0, #1
 80051ba:	d0ab      	beq.n	8005114 <_printf_i+0x164>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	079b      	lsls	r3, r3, #30
 80051c0:	d413      	bmi.n	80051ea <_printf_i+0x23a>
 80051c2:	68e0      	ldr	r0, [r4, #12]
 80051c4:	9b03      	ldr	r3, [sp, #12]
 80051c6:	4298      	cmp	r0, r3
 80051c8:	bfb8      	it	lt
 80051ca:	4618      	movlt	r0, r3
 80051cc:	e7a4      	b.n	8005118 <_printf_i+0x168>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4632      	mov	r2, r6
 80051d2:	4649      	mov	r1, r9
 80051d4:	4640      	mov	r0, r8
 80051d6:	47d0      	blx	sl
 80051d8:	3001      	adds	r0, #1
 80051da:	d09b      	beq.n	8005114 <_printf_i+0x164>
 80051dc:	3501      	adds	r5, #1
 80051de:	68e3      	ldr	r3, [r4, #12]
 80051e0:	9903      	ldr	r1, [sp, #12]
 80051e2:	1a5b      	subs	r3, r3, r1
 80051e4:	42ab      	cmp	r3, r5
 80051e6:	dcf2      	bgt.n	80051ce <_printf_i+0x21e>
 80051e8:	e7eb      	b.n	80051c2 <_printf_i+0x212>
 80051ea:	2500      	movs	r5, #0
 80051ec:	f104 0619 	add.w	r6, r4, #25
 80051f0:	e7f5      	b.n	80051de <_printf_i+0x22e>
 80051f2:	bf00      	nop
 80051f4:	08005881 	.word	0x08005881
 80051f8:	08005892 	.word	0x08005892

080051fc <memmove>:
 80051fc:	4288      	cmp	r0, r1
 80051fe:	b510      	push	{r4, lr}
 8005200:	eb01 0402 	add.w	r4, r1, r2
 8005204:	d902      	bls.n	800520c <memmove+0x10>
 8005206:	4284      	cmp	r4, r0
 8005208:	4623      	mov	r3, r4
 800520a:	d807      	bhi.n	800521c <memmove+0x20>
 800520c:	1e43      	subs	r3, r0, #1
 800520e:	42a1      	cmp	r1, r4
 8005210:	d008      	beq.n	8005224 <memmove+0x28>
 8005212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800521a:	e7f8      	b.n	800520e <memmove+0x12>
 800521c:	4402      	add	r2, r0
 800521e:	4601      	mov	r1, r0
 8005220:	428a      	cmp	r2, r1
 8005222:	d100      	bne.n	8005226 <memmove+0x2a>
 8005224:	bd10      	pop	{r4, pc}
 8005226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800522a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800522e:	e7f7      	b.n	8005220 <memmove+0x24>

08005230 <_free_r>:
 8005230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005232:	2900      	cmp	r1, #0
 8005234:	d044      	beq.n	80052c0 <_free_r+0x90>
 8005236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800523a:	9001      	str	r0, [sp, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f1a1 0404 	sub.w	r4, r1, #4
 8005242:	bfb8      	it	lt
 8005244:	18e4      	addlt	r4, r4, r3
 8005246:	f000 f913 	bl	8005470 <__malloc_lock>
 800524a:	4a1e      	ldr	r2, [pc, #120]	; (80052c4 <_free_r+0x94>)
 800524c:	9801      	ldr	r0, [sp, #4]
 800524e:	6813      	ldr	r3, [r2, #0]
 8005250:	b933      	cbnz	r3, 8005260 <_free_r+0x30>
 8005252:	6063      	str	r3, [r4, #4]
 8005254:	6014      	str	r4, [r2, #0]
 8005256:	b003      	add	sp, #12
 8005258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800525c:	f000 b90e 	b.w	800547c <__malloc_unlock>
 8005260:	42a3      	cmp	r3, r4
 8005262:	d908      	bls.n	8005276 <_free_r+0x46>
 8005264:	6825      	ldr	r5, [r4, #0]
 8005266:	1961      	adds	r1, r4, r5
 8005268:	428b      	cmp	r3, r1
 800526a:	bf01      	itttt	eq
 800526c:	6819      	ldreq	r1, [r3, #0]
 800526e:	685b      	ldreq	r3, [r3, #4]
 8005270:	1949      	addeq	r1, r1, r5
 8005272:	6021      	streq	r1, [r4, #0]
 8005274:	e7ed      	b.n	8005252 <_free_r+0x22>
 8005276:	461a      	mov	r2, r3
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	b10b      	cbz	r3, 8005280 <_free_r+0x50>
 800527c:	42a3      	cmp	r3, r4
 800527e:	d9fa      	bls.n	8005276 <_free_r+0x46>
 8005280:	6811      	ldr	r1, [r2, #0]
 8005282:	1855      	adds	r5, r2, r1
 8005284:	42a5      	cmp	r5, r4
 8005286:	d10b      	bne.n	80052a0 <_free_r+0x70>
 8005288:	6824      	ldr	r4, [r4, #0]
 800528a:	4421      	add	r1, r4
 800528c:	1854      	adds	r4, r2, r1
 800528e:	42a3      	cmp	r3, r4
 8005290:	6011      	str	r1, [r2, #0]
 8005292:	d1e0      	bne.n	8005256 <_free_r+0x26>
 8005294:	681c      	ldr	r4, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	6053      	str	r3, [r2, #4]
 800529a:	4421      	add	r1, r4
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	e7da      	b.n	8005256 <_free_r+0x26>
 80052a0:	d902      	bls.n	80052a8 <_free_r+0x78>
 80052a2:	230c      	movs	r3, #12
 80052a4:	6003      	str	r3, [r0, #0]
 80052a6:	e7d6      	b.n	8005256 <_free_r+0x26>
 80052a8:	6825      	ldr	r5, [r4, #0]
 80052aa:	1961      	adds	r1, r4, r5
 80052ac:	428b      	cmp	r3, r1
 80052ae:	bf04      	itt	eq
 80052b0:	6819      	ldreq	r1, [r3, #0]
 80052b2:	685b      	ldreq	r3, [r3, #4]
 80052b4:	6063      	str	r3, [r4, #4]
 80052b6:	bf04      	itt	eq
 80052b8:	1949      	addeq	r1, r1, r5
 80052ba:	6021      	streq	r1, [r4, #0]
 80052bc:	6054      	str	r4, [r2, #4]
 80052be:	e7ca      	b.n	8005256 <_free_r+0x26>
 80052c0:	b003      	add	sp, #12
 80052c2:	bd30      	pop	{r4, r5, pc}
 80052c4:	200040fc 	.word	0x200040fc

080052c8 <sbrk_aligned>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	4e0e      	ldr	r6, [pc, #56]	; (8005304 <sbrk_aligned+0x3c>)
 80052cc:	460c      	mov	r4, r1
 80052ce:	6831      	ldr	r1, [r6, #0]
 80052d0:	4605      	mov	r5, r0
 80052d2:	b911      	cbnz	r1, 80052da <sbrk_aligned+0x12>
 80052d4:	f000 f8bc 	bl	8005450 <_sbrk_r>
 80052d8:	6030      	str	r0, [r6, #0]
 80052da:	4621      	mov	r1, r4
 80052dc:	4628      	mov	r0, r5
 80052de:	f000 f8b7 	bl	8005450 <_sbrk_r>
 80052e2:	1c43      	adds	r3, r0, #1
 80052e4:	d00a      	beq.n	80052fc <sbrk_aligned+0x34>
 80052e6:	1cc4      	adds	r4, r0, #3
 80052e8:	f024 0403 	bic.w	r4, r4, #3
 80052ec:	42a0      	cmp	r0, r4
 80052ee:	d007      	beq.n	8005300 <sbrk_aligned+0x38>
 80052f0:	1a21      	subs	r1, r4, r0
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 f8ac 	bl	8005450 <_sbrk_r>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d101      	bne.n	8005300 <sbrk_aligned+0x38>
 80052fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005300:	4620      	mov	r0, r4
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	20004100 	.word	0x20004100

08005308 <_malloc_r>:
 8005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530c:	1ccd      	adds	r5, r1, #3
 800530e:	f025 0503 	bic.w	r5, r5, #3
 8005312:	3508      	adds	r5, #8
 8005314:	2d0c      	cmp	r5, #12
 8005316:	bf38      	it	cc
 8005318:	250c      	movcc	r5, #12
 800531a:	2d00      	cmp	r5, #0
 800531c:	4607      	mov	r7, r0
 800531e:	db01      	blt.n	8005324 <_malloc_r+0x1c>
 8005320:	42a9      	cmp	r1, r5
 8005322:	d905      	bls.n	8005330 <_malloc_r+0x28>
 8005324:	230c      	movs	r3, #12
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	2600      	movs	r6, #0
 800532a:	4630      	mov	r0, r6
 800532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005330:	4e2e      	ldr	r6, [pc, #184]	; (80053ec <_malloc_r+0xe4>)
 8005332:	f000 f89d 	bl	8005470 <__malloc_lock>
 8005336:	6833      	ldr	r3, [r6, #0]
 8005338:	461c      	mov	r4, r3
 800533a:	bb34      	cbnz	r4, 800538a <_malloc_r+0x82>
 800533c:	4629      	mov	r1, r5
 800533e:	4638      	mov	r0, r7
 8005340:	f7ff ffc2 	bl	80052c8 <sbrk_aligned>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	4604      	mov	r4, r0
 8005348:	d14d      	bne.n	80053e6 <_malloc_r+0xde>
 800534a:	6834      	ldr	r4, [r6, #0]
 800534c:	4626      	mov	r6, r4
 800534e:	2e00      	cmp	r6, #0
 8005350:	d140      	bne.n	80053d4 <_malloc_r+0xcc>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	4631      	mov	r1, r6
 8005356:	4638      	mov	r0, r7
 8005358:	eb04 0803 	add.w	r8, r4, r3
 800535c:	f000 f878 	bl	8005450 <_sbrk_r>
 8005360:	4580      	cmp	r8, r0
 8005362:	d13a      	bne.n	80053da <_malloc_r+0xd2>
 8005364:	6821      	ldr	r1, [r4, #0]
 8005366:	3503      	adds	r5, #3
 8005368:	1a6d      	subs	r5, r5, r1
 800536a:	f025 0503 	bic.w	r5, r5, #3
 800536e:	3508      	adds	r5, #8
 8005370:	2d0c      	cmp	r5, #12
 8005372:	bf38      	it	cc
 8005374:	250c      	movcc	r5, #12
 8005376:	4629      	mov	r1, r5
 8005378:	4638      	mov	r0, r7
 800537a:	f7ff ffa5 	bl	80052c8 <sbrk_aligned>
 800537e:	3001      	adds	r0, #1
 8005380:	d02b      	beq.n	80053da <_malloc_r+0xd2>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	442b      	add	r3, r5
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	e00e      	b.n	80053a8 <_malloc_r+0xa0>
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	1b52      	subs	r2, r2, r5
 800538e:	d41e      	bmi.n	80053ce <_malloc_r+0xc6>
 8005390:	2a0b      	cmp	r2, #11
 8005392:	d916      	bls.n	80053c2 <_malloc_r+0xba>
 8005394:	1961      	adds	r1, r4, r5
 8005396:	42a3      	cmp	r3, r4
 8005398:	6025      	str	r5, [r4, #0]
 800539a:	bf18      	it	ne
 800539c:	6059      	strne	r1, [r3, #4]
 800539e:	6863      	ldr	r3, [r4, #4]
 80053a0:	bf08      	it	eq
 80053a2:	6031      	streq	r1, [r6, #0]
 80053a4:	5162      	str	r2, [r4, r5]
 80053a6:	604b      	str	r3, [r1, #4]
 80053a8:	4638      	mov	r0, r7
 80053aa:	f104 060b 	add.w	r6, r4, #11
 80053ae:	f000 f865 	bl	800547c <__malloc_unlock>
 80053b2:	f026 0607 	bic.w	r6, r6, #7
 80053b6:	1d23      	adds	r3, r4, #4
 80053b8:	1af2      	subs	r2, r6, r3
 80053ba:	d0b6      	beq.n	800532a <_malloc_r+0x22>
 80053bc:	1b9b      	subs	r3, r3, r6
 80053be:	50a3      	str	r3, [r4, r2]
 80053c0:	e7b3      	b.n	800532a <_malloc_r+0x22>
 80053c2:	6862      	ldr	r2, [r4, #4]
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	bf0c      	ite	eq
 80053c8:	6032      	streq	r2, [r6, #0]
 80053ca:	605a      	strne	r2, [r3, #4]
 80053cc:	e7ec      	b.n	80053a8 <_malloc_r+0xa0>
 80053ce:	4623      	mov	r3, r4
 80053d0:	6864      	ldr	r4, [r4, #4]
 80053d2:	e7b2      	b.n	800533a <_malloc_r+0x32>
 80053d4:	4634      	mov	r4, r6
 80053d6:	6876      	ldr	r6, [r6, #4]
 80053d8:	e7b9      	b.n	800534e <_malloc_r+0x46>
 80053da:	230c      	movs	r3, #12
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	4638      	mov	r0, r7
 80053e0:	f000 f84c 	bl	800547c <__malloc_unlock>
 80053e4:	e7a1      	b.n	800532a <_malloc_r+0x22>
 80053e6:	6025      	str	r5, [r4, #0]
 80053e8:	e7de      	b.n	80053a8 <_malloc_r+0xa0>
 80053ea:	bf00      	nop
 80053ec:	200040fc 	.word	0x200040fc

080053f0 <_realloc_r>:
 80053f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f4:	4680      	mov	r8, r0
 80053f6:	4614      	mov	r4, r2
 80053f8:	460e      	mov	r6, r1
 80053fa:	b921      	cbnz	r1, 8005406 <_realloc_r+0x16>
 80053fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005400:	4611      	mov	r1, r2
 8005402:	f7ff bf81 	b.w	8005308 <_malloc_r>
 8005406:	b92a      	cbnz	r2, 8005414 <_realloc_r+0x24>
 8005408:	f7ff ff12 	bl	8005230 <_free_r>
 800540c:	4625      	mov	r5, r4
 800540e:	4628      	mov	r0, r5
 8005410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005414:	f000 f838 	bl	8005488 <_malloc_usable_size_r>
 8005418:	4284      	cmp	r4, r0
 800541a:	4607      	mov	r7, r0
 800541c:	d802      	bhi.n	8005424 <_realloc_r+0x34>
 800541e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005422:	d812      	bhi.n	800544a <_realloc_r+0x5a>
 8005424:	4621      	mov	r1, r4
 8005426:	4640      	mov	r0, r8
 8005428:	f7ff ff6e 	bl	8005308 <_malloc_r>
 800542c:	4605      	mov	r5, r0
 800542e:	2800      	cmp	r0, #0
 8005430:	d0ed      	beq.n	800540e <_realloc_r+0x1e>
 8005432:	42bc      	cmp	r4, r7
 8005434:	4622      	mov	r2, r4
 8005436:	4631      	mov	r1, r6
 8005438:	bf28      	it	cs
 800543a:	463a      	movcs	r2, r7
 800543c:	f7ff fbb8 	bl	8004bb0 <memcpy>
 8005440:	4631      	mov	r1, r6
 8005442:	4640      	mov	r0, r8
 8005444:	f7ff fef4 	bl	8005230 <_free_r>
 8005448:	e7e1      	b.n	800540e <_realloc_r+0x1e>
 800544a:	4635      	mov	r5, r6
 800544c:	e7df      	b.n	800540e <_realloc_r+0x1e>
	...

08005450 <_sbrk_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4d06      	ldr	r5, [pc, #24]	; (800546c <_sbrk_r+0x1c>)
 8005454:	2300      	movs	r3, #0
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	f7fb fc22 	bl	8000ca4 <_sbrk>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_sbrk_r+0x1a>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_sbrk_r+0x1a>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	20004104 	.word	0x20004104

08005470 <__malloc_lock>:
 8005470:	4801      	ldr	r0, [pc, #4]	; (8005478 <__malloc_lock+0x8>)
 8005472:	f000 b811 	b.w	8005498 <__retarget_lock_acquire_recursive>
 8005476:	bf00      	nop
 8005478:	20004108 	.word	0x20004108

0800547c <__malloc_unlock>:
 800547c:	4801      	ldr	r0, [pc, #4]	; (8005484 <__malloc_unlock+0x8>)
 800547e:	f000 b80c 	b.w	800549a <__retarget_lock_release_recursive>
 8005482:	bf00      	nop
 8005484:	20004108 	.word	0x20004108

08005488 <_malloc_usable_size_r>:
 8005488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800548c:	1f18      	subs	r0, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	bfbc      	itt	lt
 8005492:	580b      	ldrlt	r3, [r1, r0]
 8005494:	18c0      	addlt	r0, r0, r3
 8005496:	4770      	bx	lr

08005498 <__retarget_lock_acquire_recursive>:
 8005498:	4770      	bx	lr

0800549a <__retarget_lock_release_recursive>:
 800549a:	4770      	bx	lr

0800549c <_init>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	bf00      	nop
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr

080054a8 <_fini>:
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	bf00      	nop
 80054ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ae:	bc08      	pop	{r3}
 80054b0:	469e      	mov	lr, r3
 80054b2:	4770      	bx	lr
